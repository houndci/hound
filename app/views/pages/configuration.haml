- content_for :page_title, "Configuration"

.docs
  %nav.docs-nav
    %ul
      %li
        = link_to "Hound", "#configuration", class: "docs-nav-link"
      %li
        = link_to "Ruby", "#ruby", class: "docs-nav-link"
      %li
        = link_to "CoffeeScript", "#coffeescript", class: "docs-nav-link"
      %li
        = link_to "JavaScript", "#javascript", class: "docs-nav-link"
      %li
        = link_to "SCSS", "#scss", class: "docs-nav-link"
      %li
        = link_to "Haml", "#haml", class: "docs-nav-link"
      %li
        = link_to "Go", "#go", class: "docs-nav-link"
      %li
        = link_to "Swift", "#swift", class: "docs-nav-link"
      %li
        = link_to "ESLint", "#eslint", class: "docs-nav-link"
      %li
        = link_to "Python", "#python", class: "docs-nav-link"
      %li
        = link_to "TSLint", "#tslint", class: "docs-nav-link"
      %li
        = link_to "Elixir", "#elixir", class: "docs-nav-link"
      %li
        = link_to "Sass-lint", "#sass-lint", class: "docs-nav-link"

  %section.docs-content
    %article.docs-article
      %h1 Hound Documentation
      %p
        Want to modify style rules to better suit your preferences?
        Below you will find documentation on configuring style rules for each
        linter that we support.

      %p
        If this page doesn't help you find what you are looking for,
        please tweet at us
        = link_to "@houndci", "https://twitter.com/houndci", new_window_options
        or email us at #{mail_to "hound@thoughtbot.com"}
        and we will help you out.

    %article.docs-article#configuration
      %h3 Hound Configuration

      %p The following linters are enabled by default:
      %p
        %ul
          %li RuboCop (Ruby)
          %li CoffeeLint (CoffeeScript)
          %li JavaScript (JSHint)
          %li SCSS (SCSSLint)
          %li Haml (HAMLLint)
          %li Go (golint)
          %li Swift (SwiftLint)
      %p All other linters must be explicitly enabled.

      %p
        Hound will look for a custom configuration file named
        %em.code-inline .hound.yml
        in the root directory of your project.

      %p
        Using
        %em.code-inline .hound.yml
        you can tell Hound which linters to enable or disable,
        specify paths to files that provide custom style rules,
        and determine which files/directories to ignore.

        Here is an example:

      %code.code-block
        :preserve
          scss:
            enabled: false

          ruby:
            config_file: .rubocop.yml

          jshint:
            ignore_file: .jshintignore

      %p
        In this example,
        review of SCSS is deactivated,
        custom RuboCop configuration is provided for Ruby files,
        and an ignore file is given that tells which files/directories JSHint
        should not review.

      %p
        Hound can be configured to use
        = link_to "GitHub's Status API",
          "https://github.com/blog/1935-see-results-from-all-pull-request-status-checks",
          new_window_options
        to mark a pull request as failed if any violations are found.
        To do so, add the following to your
        %em.code-inline .hound.yml

      %code.code-block
        :preserve
          fail_on_violations: true

    %article.docs-article#ruby
      %h3 Ruby
      %p
        Hound uses
        = link_to "RuboCop",
          "https://github.com/bbatsov/rubocop",
          new_window_options
        to review Ruby code.

      %p
        By default, Hound uses the
        = succeed "." do
          = link_to "default RuboCop config",
            rubocop_config_url,
            new_window_options
        To change the way RuboCop is configured, add a
        %em.code-inline .rubocop.yml
        file to your project, configure it as desired
        (see the
        = succeed ")," do
          = link_to "RuboCop docs",
            "http://rubocop.readthedocs.io/en/latest/",
            new_window_options
        and reference it in
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            ruby:
              config_file: .rubocop.yml

      %p
        To disable Ruby style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            ruby:
              enabled: false

    %article.docs-article#coffeescript
      %h3 CoffeeScript

      %p
        Hound uses
        = link_to "CoffeeLint", "http://www.coffeelint.org", new_window_options
        with the default configuration.

      %p
        To change the way CoffeeLint is configured, add a config file to your
        project and reference it in your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            coffeescript:
              config_file: coffeelint.json

      %p
        To disable CoffeeScript style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            coffeescript:
              enabled: false

    %article.docs-article#javascript
      %h3 JavaScript

      %p
        Hound uses
        = link_to "JSHint", "https://github.com/jshint/jshint",
          new_window_options
        to review JavaScript code by default.

      %p
        To change the way JSHint is configured, add
        %em.code-inline .jshintrc
        file to your project,
        specify your desired configuration
        and reference the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            jshint:
              config_file: .jshintrc

      %p
        Check out
        = link_to "JSHint configuration", "http://jshint.com/docs/options/",
          new_window_options
        for supported options.

      %p
        To ignore certain files and directories, add
        %em.code-inline .jshintignore
        file to your project,
        include in it path patterns for files/directories that you want ignored,
        and reference the ignore file in your
        %em.code-inline .hound.yml
        file. See
        = link_to "linter docs", "http://jshint.com/docs/cli",
          new_window_options
        for more info ("Ignoring Files" section).

        %code.code-block
          :preserve
            jshint:
              ignore_file: .javascript_ignore

      %p
        To disable JavaScript style checking, add the following to your
        %em.code-inline .hound.yml
        file.

        %code.code-block
          :preserve
            jshint:
              enabled: false

    %article.docs-article#scss
      %h3 SCSS

      %p
        Hound uses
        = link_to "scss-lint",
          "https://github.com/causes/scss-lint",
          new_window_options
        with this
        = link_to "config", scss_config_url, new_window_options
        by default.

      %p
        To change the way scss-lint is configured, simply copy the
        = link_to "default config file", scss_config_url, new_window_options
        into your project, make changes and reference the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            scss:
              config_file: .scss-lint.yml

      %p
        To ignore certain SCSS files, add
        %em.code-inline exclude:
        directive to your
        %em.code-inline .scss-lint.yml
        file, like:

        %code.code-block
          :preserve
            exclude:
              - "app/assets/stylesheets/plugins/**"

      %p
        To disable SCSS style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            scss:
              enabled: false

    %article.docs-article#haml
      %h3 Haml

      %p
        Hound uses
        = link_to "haml-lint",
          "https://github.com/brigade/haml-lint",
          new_window_options
        with this
        = link_to "config", haml_config_url, new_window_options
        by default.

      %p
        To change the way haml-lint is configured, simply copy the
        = link_to "default config file", haml_config_url, new_window_options
        into your project, make changes and reference the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            haml:
              config_file: .haml-lint.yml

      %p
        To disable Haml style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            haml:
              enabled: false

    %article.docs-article#go
      %h3 Go

      %p
        Hound uses
        = link_to "Golint",
          "https://github.com/golang/lint",
          new_window_options
        to review Go code.

      %p
        To disable Go style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            go:
              enabled: false

    %article.docs-article#swift
      %h3 Swift

      %p
        Hound uses
        = link_to "SwiftLint",
          "https://github.com/realm/SwiftLint",
          new_window_options
        with this
        = link_to "config", swift_config_url, new_window_options
        by default.

      %p
        To change the way SwiftLint is configured, copy the
        = link_to "default config file", swift_config_url, new_window_options
        into your project, make changes and reference the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            swift:
              config_file: .swiftlint.yml

      %p
        To disable Swift style checking, add the following to your
        %em.code-inline .hound.yml
        file.

        %code.code-block
          :preserve
            swift:
              enabled: false

      %p
        For more information on the available configuration in your
        %em.code-inline config_file
        , you can read about it on the
        = link_to "SwiftLint Configuration Documentation",
          "https://github.com/realm/SwiftLint#configuration",
          new_window_options

    %article.docs-article#eslint
      %h3 ESLint

      %p
        Hound uses
        = link_to "ESLint", "http://eslint.org/", new_window_options
        with this
        = link_to "config", eslint_config_url, new_window_options
        by default.

      %p
        To enable ESLint style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            eslint:
              enabled: true

      %p
        To change the way ESLint is configured, add
        %em.code-inline .eslintrc
        file to your project,
        specify your desired configuration
        and reference the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            eslint:
              enabled: true
              config_file: .eslintrc

      %p
        For more information on configuring ESLint rules, see the
        = link_to "ESLint Rules Documentation",
          "http://eslint.org/docs/rules/",
          new_window_options

      %p
        To ignore certain files and directories, add
        %em.code-inline .eslintignore
        file to your project,
        include in it path patterns for files/directories that you want ignored,
        and reference the ignore file in your
        %em.code-inline .hound.yml
        \. See
        = link_to "linter docs",
          "http://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories",
          new_window_options
        for more info.

        %code.code-block
          :preserve
            eslint:
              ignore_file: .eslintignore

    %article.docs-article#python
      %h3 Python

      %p
        Hound uses
        = link_to "Flake8",
          "http://flake8.readthedocs.org/en/latest/",
          new_window_options
        with this
        = link_to "default config",
          "http://flake8.readthedocs.org/en/latest/config.html#default",
          new_window_options
        by default.

      %p
        To enable Python style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            python:
              enabled: true

      %p
        To change the way Flake8 is configured, create a
        = link_to ".ini file",
          "http://flake8.readthedocs.org/en/latest/config.html#per-project",
          new_window_options
        with your custom configuration and reference the file in
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            python:
              enabled: true
              config_file: .flake8.ini

    %article.docs-article#tslint
      %h3 TSLint
      %p
        Hound uses
        = link_to "TSLint",
          "https://palantir.github.io/tslint/",
          new_window_options
        to review TypeScript code.

      %p
        To enable TypeScript style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            tslint:
              enabled: true

      %p
        To change the way TSLint is configured, add a
        %em.code-inline tslint.json
        file to your project, configure it as desired
        (see the
        = succeed ")," do
          = link_to "TSLint rules",
            "https://palantir.github.io/tslint/rules/",
            new_window_options
        and reference it in
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            tslint:
              config_file: tslint.json

    %article.docs-article#elixir
      %h3 Elixir
      %p
        Hound uses
        = link_to "Credo",
          "http://credo-ci.org/",
          new_window_options
        to review Elixir code.

      %p
        To enable Elixir style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            elixir:
              enabled: true

      %p
        By default, Hound uses the
        = succeed "." do
          = link_to "Credo's Elixir Style Guide",
            "https://github.com/rrrene/elixir-style-guide",
            new_window_options
        To change the way Credo is configured, add a
        %em.code-inline .credo.exs
        file to your project, configure it as desired
        (see the
        = succeed ")," do
          = link_to "Credo docs",
            "http://credo-ci.org/",
            new_window_options
        and reference it in
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            elixir:
              enabled: true
              config_file: .credo.exs

    %article.docs-article#sass-lint
      %h3 Sass-lint
      %p
        Hound uses
        = link_to "sass-lint",
          "https://github.com/sasstools/sass-lint",
          new_window_options
        with this
        = link_to "config", sass_lint_config_url, new_window_options
        by default.

      %p
        To enable Sass-lint style checking, add the following to your
        %em.code-inline .hound.yml

        %code.code-block
          :preserve
            sass-lint:
              enabled: true
      %p
        To change the way Sass-lint is configured, add
        %em.code-inline .sass-lint.yml
        file to your project,
        specify your desired configuration
        and refreence the file in your
        %em.code-inline .hound.yml

      %p
        %code.code-block
          :preserve
            sass-lint:
              enabled: true
              config_file: .sass-lint.yml

    %article.docs-article
      %h3 Didn't find what you where looking for?

      %p
        Please tweet at us
        = link_to "@houndci", "https://twitter.com/houndci", new_window_options
        or email us at #{mail_to "hound@thoughtbot.com"}
        and we will help you out.
