- content_for :page_title, "Configuration"

.hound-docs.configuration-docs
  %aside.docs-nav
    %ul
      %li
        = link_to "Hound", "#configuration"
      %li
        = link_to "Ruby", "#ruby"
      %li
        = link_to "CoffeeScript", "#coffeescript"
      %li
        = link_to "JavaScript", "#javascript"
      %li
        = link_to "SCSS", "#scss"
      %li
        = link_to "Haml", "#haml"
      %li
        = link_to "Go", "#go"
      %li
        = link_to "Python", "#python"
      %li
        = link_to "Swift", "#swift"

  %section.doc-content
    %article
      %h1 Hound Documentation
      %p
        Want to modify style rules to better suit your preferences?
        Below you will find documentation on configuring style rules for each
        language we support.

      %p
        If this page doesn't help you find what you are looking for,
        please tweet at us
        #{link_to "@houndci", "https://twitter.com/houndci", target: :blank}
        or email us at #{mail_to "hound@thoughtbot.com"}
        and we will help you out.

    %article#configuration
      %h3 Hound Configuration
      %p
        With a
        %em.code .hound.yml
        file you can tell Hound which languages not to review
        (all supported, non-beta languages are reviewed by default)
        and specify paths to custom style rules and an ignore file
        for JavaScript.

      %p
        Put your
        %em.code .hound.yml
        file in the root directory of your project. Here is an example:

      %code.code-block
        :preserve
          scss-lint:
            enabled: false

          rubocop:
            config_file: .ruby-style.yml

          jshint:
            ignore_file: .javascript_ignore

      %p
        In this example, review of SCSS is deactivated (:sad face:) and we are
        pointing Hound to a custom config file for Ruby style checking and
        an ignore file for JavaScript.

      %p
        Hound can be configured to use
        = link_to "GitHub's Status API",
          "https://github.com/blog/1935-see-results-from-all-pull-request-status-checks",
          target: :blank
        to mark a pull request as failed if any violations are found. To do so,
        add the following to your
        %em.code .hound.yml
        file:

      %code.code-block
        :preserve
          fail_on_violations: true

    %article#ruby
      %h3 Ruby
      %p
        Hound uses
        #{link_to "RuboCop", "https://github.com/bbatsov/rubocop", target: :blank}
        with this
        #{link_to "config", ruby_config_url, target: :blank}
        by default.

      %p
        If you need to change the way Hound is configured, simply copy the
        #{link_to "default config", ruby_config_url, target: :blank}
        into your project, make changes and reference the file in your
        %em.code .hound.yml

        %code.code-block
          :preserve
            rubocop:
              config_file: .ruby-style.yml

      %p
        Add the following code to your
        %em.code .hound.yml
        to disable Ruby style checking.

        %code.code-block
          :preserve
            rubocop:
              enabled: false

    %article#coffeescript
      %h3 CoffeeScript

      %p
        Hound uses
        #{link_to "CoffeeLint", "http://www.coffeelint.org", target: :blank}
        with this
        #{link_to "config", coffeescript_config_url, target: :blank}.

      %p
        If you need to change the way Hound is configured, simply copy the
        #{link_to "default config", coffeescript_config_url, target: :blank}.
        into your project, make changes and reference the file in your
        %em.code .hound.yml

        %code.code-block
          :preserve
            coffeelint:
              config_file: .coffeescript-style.json

      %p
        Add the following code to your
        %em.code .hound.yml
        to disable CoffeeScript style checking.

        %code.code-block
          :preserve
            coffeelint:
              enabled: false

    %article#javascript
      %h3 JavaScript

      %p
        By default, Hound uses #{link_to "JSHint", "#jshint"} for style checking
        JavaScript code, but we also support #{link_to "ESLint", "#eslint"}.

      #jshint
        %h4 JSHint

        %p
          Hound uses
          = link_to "JSHint", "https://github.com/jshint/jshint", target: :blank
          with this #{link_to "config", javascript_config_url, target: :blank}.

        %p
          If you need to change the way Hound is configured, simply copy the
          #{link_to "default config", javascript_config_url, target: :blank}.
          into your project, make changes and reference the file in your
          %em.code .hound.yml

        %p
          %code.code-block
            :preserve
              jshint:
                config_file: .jshintrc

        %p
          If you would like to ignore certain JavaScript files, simply copy the
          #{link_to "default config", javascript_ignore_url, target: :blank}
          into your project, make changes and reference the file in your
          %em.code .hound.yml

          %code.code-block
            :preserve
              jshint:
                ignore_file: .jsintignore

        %p
          Add the following code to your
          %em.code .hound.yml
          to disable JavaScript style checking.

          %code.code-block
            :preserve
              jshint:
                enabled: false

      #eslint
        %h4 ESLint (beta)

        %p
          Add the following code to your
          %em.code .hound.yml
          to enable ESLint style checking.

          %code.code-block
            :preserve
              jshint:
                enabled: false
              eslint:
                enabled: true

        %p
          Hound uses
          = link_to "ESLint", "http://eslint.org/", target: :blank
          with this
          = link_to "config", eslint_config_url, target: :blank

        %p
          If you need to change the way Hound is configured, simply copy the
          #{link_to "default config", eslint_config_url, target: :blank}.
          into your project, make changes and reference the file in your
          %em.code .hound.yml

        %p
          %code.code-block
            :preserve
              eslint:
                enabled: true
                config_file: .eslintrc

        %p
          For more information on the available rules in your
          %em.code config_file
          , you can read about them on the
          = link_to "ESLint Rules Documentation",
            "http://eslint.org/docs/rules/",
            target: :blank

    %article#scss
      %h3 SCSS

      %p
        Hound uses
        #{link_to "SCSS-Lint", "https://github.com/causes/scss-lint", target: :blank}
        with this
        #{link_to "config", scss_config_url, target: :blank}.

      %p
        If you need to change the way Hound is configured, simply copy the
        #{link_to "default config", scss_config_url, target: :blank}.
        into your project, make changes and reference the file in your
        %em.code .hound.yml

      %p
        %code.code-block
          :preserve
            scss-lint:
              config_file: .scss-style.yml

      %p
        If you would like to ignore certain SCSS files, add
        %em.code exclude:
        to your
        %em.code .scss-style.yml
        to exclude scss files from being linted.

        %code.code-block
          :preserve
            exclude:
              - "app/assets/stylesheets/plugins/**"

      %p
        Add the following code to your
        %em.code .hound.yml
        to disable SCSS style checking.

        %code.code-block
          :preserve
            scss-lint:
              enabled: false

    %article#haml
      %h3 Haml

      %p
        Add the following code to your
        %em.code .hound.yml
        to enable Haml style checking.

        %code.code-block
          :preserve
            haml-lint:
              enabled: true

      %p
        Hound uses
        #{link_to "haml-lint", "https://github.com/brigade/haml-lint", target: :blank}
        with this
        #{link_to "config", haml_config_url, target: :blank}.

      %p
        If you need to change the way Hound is configured, simply copy the
        #{link_to "default config", haml_config_url, target: :blank}
        into your project, make changes and reference the file in your
        %em.code .hound.yml

      %p
        %code.code-block
          :preserve
            haml-lint:
              config_file: .haml-style.yml

    %article#go
      %h3 Go

      %p
        Add the following code to your
        %em.code .hound.yml
        to enable Go style checking.

        %code.code-block
          :preserve
            golint:
              enabled: true

    %article#python
      %h3 Python (beta)

      %p
        Add the following code to your
        %em.code .hound.yml
        to enable Python style checking.

        %code.code-block
          :preserve
            flake8:
              enabled: true

      %p
        Hound uses
        = link_to "Flake8",
          "http://flake8.readthedocs.org/en/latest/",
          target: :blank
        with its
        = link_to "default config",
          "http://flake8.readthedocs.org/en/latest/config.html#default",
          target: :blank
        \.

      %p
        If you need to change the way Hound is configured, create a
        = link_to ".ini file",
          "http://flake8.readthedocs.org/en/latest/config.html#per-project",
          target: :blank
        with your custom configuration and reference the file in
        %em.code .hound.yml

      %p
        %code.code-block
          :preserve
            flake8:
              enabled: true
              config_file: .flake8.ini

    %article#swift
      %h3 Swift

      %p
        Hound uses
        = link_to "SwiftLint",
          "https://github.com/realm/SwiftLint",
          target: :blank
        with this
        = link_to "config", swift_config_url, target: :blank

      %p
        If you need to change the way Hound is configured, simply copy the
        #{link_to "default config", swift_config_url, target: :blank}.
        into your project, make changes and reference the file in your
        %em.code .hound.yml

      %p
        %code.code-block
          :preserve
            swiftlint:
              config_file: .swiftlint.yml

      %p
        If you would like to disable Swift style checking,
        add the following code to your
        %em.code .hound.yml
        file.

        %code.code-block
          :preserve
            swiftlint:
              enabled: false

      %p
        For more information on the available configuration in your
        %em.code config_file
        , you can read about it on the
        = link_to "SwiftLint Configuration Documentation",
          "https://github.com/realm/SwiftLint#configuration",
          target: :blank

    %article
      %h3 Didn't find what you where looking for?

      %p
        Please tweet at us
        #{link_to "@houndci", "https://twitter.com/houndci", target: :blank}
        or email us at #{mail_to "hound@thoughtbot.com"}
        and we will help you out.
