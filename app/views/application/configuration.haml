= render 'shared/header'

%main.content-doc
  %h2 Hound configuration (optional)

  %p
    By default, Hound uses #{link_to "thoughtbot's style guide", 'https://github.com/thoughtbot/guides/tree/master/style#ruby'}
    with no additional setup.

  %p
    Custom configuration of the style guide is entirely optional and is
    achieved by specifying rules in
    %em.code .hound.yml
    file.
  %p
    Hound uses #{link_to 'RuboCop', 'https://github.com/bbatsov/rubocop'} and
    #{link_to 'CoffeeLint', 'https://github.com/zmbush/coffeelint-ruby'} gems to
    handle the style checking. Thus, most of the RuboCop configuration, except
    inheritance, is supported in Hound as well, and CoffeeLint customization is
    under way.

  %p
    Hound will look for
    %em.code .hound.yml
    file in the root of the repo, and apply the custom configuration on top of the
    default configuration.

  %h3 Adding custom config
  %ol.numbered
    %li
      Add a file named
      %em.code .hound.yml
      to the root of your repo.
    %li
      Add your custom configuration to
      %em.code .hound.yml
      file.
      %p For example:
      %code.code-block
        :preserve
          AllCops:
            Exclude:
              - config/initializers/third_party.rb

          Style/LineLength:
            Description: 'Limit lines to 130 characters.'
            Max: 130

          Style/StringLiterals:
            EnforcedStyle: single_quotes

          Style/HashSyntax:
            EnforcedStyle: hash_rockets

          Style/RedundantBegin:
            Enabled: false

      See #{link_to 'more config options', 'https://github.com/bbatsov/rubocop/blob/master/config/enabled.yml'} in the RuboCop project.
    %li
      Commit the changes to your repo, and the following pull requests will use
      your custom configuration.
    %li
      If you set
      %em.code ShowCopNames: true
      in your
      %em.code .hound.yml
      file, Hound will prefix all of its pull request comments with the Rubocop config key
      (cop name) of the corresponding style violation. You may find this useful when deciding
      which style rules you would like to enable or disable.
