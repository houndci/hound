= render 'shared/header'

%main.content-doc
  %h2 Hound configuration (optional)

  %p
    With no additional setup, Hound uses
    #{link_to "default configuration", "https://github.com/thoughtbot/hound/blob/master/.hound"}
    that is based on
    #{link_to "thoughtbot's style guide", 'https://github.com/thoughtbot/guides/tree/master/style'}.

  %p
    Custom configuration of the style guide is entirely optional and is
    achieved by specifying guidelines in
    %em.code .hound/*
    files.

  %h3 Ruby

  %p
    Hound uses #{link_to "RuboCop", "https://github.com/bbatsov/rubocop"} to
    handle Ruby style checking. Thus, most of the RuboCop configuration, except
    inheritance, is supported in Hound as well.

  %p
    Hound will look for
    %em.code .hound/ruby.yml
    file in the root of your repo, and apply the custom configuration on top of
    the default configuration.

  %p
    Follow these steps to add your own custom configuration:

  %ol.numbered
    %li
      Add a file named
      %em.code .hound/ruby.yml
      to the root of your repo.
    %li
      Add your custom configuration to
      %em.code .hound/ruby.yml
      file.
      %p For example:
      %code.code-block
        :preserve
          AllCops:
            Exclude:
              - config/initializers/third_party.rb

          Style/LineLength:
            Description: 'Limit lines to 130 characters.'
            Max: 130

          Style/StringLiterals:
            EnforcedStyle: single_quotes

          Style/HashSyntax:
            EnforcedStyle: hash_rockets

          Style/RedundantBegin:
            Enabled: false

      See #{link_to 'more config options', 'https://github.com/bbatsov/rubocop/blob/master/config/enabled.yml'} in the RuboCop project.
    %li
      Commit the changes to your repo, and the following pull requests will use
      your custom configuration in combination with Hound's defaults.
    %li
      If you set
      %em.code ShowCopNames: true
      in your
      %em.code .hound/ruby.yml
      file, Hound will prefix all of its pull request comments with the Rubocop config key
      (cop name) of the corresponding style violation. You may find this useful when deciding
      which style rules you would like to enable or disable.

  %h3 CoffeeScript

  %p
    Hound uses #{link_to "CoffeeLint", "http://www.coffeelint.org/"} to handle
    CoffeeScipt style checking. Thus, most of the CoffeeLint configuration is
    supported in Hound as well.

  %p
    Hound will look for
    %em.code .hound/coffee.json
    file in the root of your repo, and apply the custom configuration on top of
    the default configuration.

  %p
    Follow these steps to add your own custom configuration:

  %ol.numbered
    %li
      Add a file named
      %em.code .hound/coffee.json
      to the root of your repo.
    %li
      Add your custom configuration to
      %em.code .hound/coffee.json
      file.
      %p For example:
      %code.code-block
        :preserve
          {
            "cyclomatic_complexity": {
              "value": 10,
              "level": "error"
            }
          }
      See
      #{link_to "more config options", "http://www.coffeelint.org/#options"}
      in the CoffeeLint project.
    %li
      Commit the changes to your repo, and the following pull requests will use
      your custom configuration in combination with Hound's defaults.
