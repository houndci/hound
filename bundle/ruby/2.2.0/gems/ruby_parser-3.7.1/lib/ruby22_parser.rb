#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-605,584,610,584,3,217,218,-605,-605,-605,753,270,220,-605,-605,569',
'-605,-510,-99,-106,855,241,665,-101,-510,-605,572,270,665,822,-103,584',
'-102,584,270,610,-605,-605,615,-605,-605,-605,-605,-605,-100,744,217',
'218,221,745,705,-94,-92,238,-100,584,664,240,239,580,579,221,664,612',
'611,623,665,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,733,-104,-605,-605,-605,-105,649,217,218,270,-605,-416,573',
'-605,221,612,611,269,-605,664,-605,-101,-605,-605,-605,-605,-605,-605',
'-605,-601,-605,-605,-605,269,116,752,116,-94,-92,115,269,115,-90,-97',
'-288,-605,-605,845,-93,-98,-605,-288,-288,-288,116,221,-101,-288,-288',
'115,-288,-101,-102,-103,116,-102,116,-602,-103,115,-102,115,-94,-92',
'704,-94,-92,-100,-91,733,-288,-288,-100,-288,-288,-288,-288,-288,116',
'-94,-92,935,221,115,-102,-103,269,221,733,629,116,83,883,-425,610,115',
'-95,665,822,84,-96,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,626,-92,-288,-288,-288,-84,648,822,531,590,-288',
'94,95,-288,94,95,664,241,-288,-70,-288,694,-288,-288,-288,-288,-288',
'-288,-288,-89,-288,-425,-288,-100,272,-601,610,628,-425,-605,612,611',
'608,272,-502,-288,-288,-425,-95,788,-288,-502,-502,-502,116,221,-502',
'-502,-502,115,-502,680,-104,625,-105,-425,851,822,-502,787,-502,-502',
'-502,116,-93,-94,543,-599,115,545,-502,-502,694,-502,-502,-502,-502',
'-502,-511,569,96,97,-605,96,97,-511,116,612,611,-605,572,115,-517,-516',
'-601,-103,765,458,-605,-605,-517,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,-502,-101,-605,-502,-502,-502,-505,-502',
'-502,580,579,-502,610,-505,-502,-502,221,-502,-599,-502,-90,-502,-505',
'-502,-502,-502,-502,-502,-502,-502,-502,-502,506,-502,-99,-98,504,-502',
'-605,-106,-599,531,-99,573,260,-605,-502,-502,-502,-502,-601,-502,-505',
'-502,-605,610,217,218,-264,-505,-505,-505,-513,-502,-505,-505,-505,792',
'-505,-513,-280,221,-605,612,611,491,-505,-280,-505,-505,-505,543,763',
'-96,542,-598,-280,543,-505,-505,545,-505,-505,-505,-505,-505,564,-105',
'561,560,559,882,562,491,564,610,561,560,559,959,562,561,560,559,610',
'562,612,611,618,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-505,774,-505,-505,-505,-505,-502,-505,-505,-505,-263,-505',
'768,-502,-505,-505,767,-505,-598,-505,643,-505,-502,-505,-505,-505,-505',
'-505,-505,-505,766,-505,-507,-505,612,611,630,610,543,-507,-598,545',
'847,612,611,613,-505,-505,-505,-505,981,-505,-288,-505,-516,773,580',
'579,736,-288,-288,-288,-94,-505,-288,-288,-288,564,-288,561,560,559',
'569,562,533,-508,-103,-509,-288,-288,-288,534,-508,572,-509,217,218',
'590,-288,-288,456,-288,-288,-288,-288,-288,-89,-91,612,611,608,263,748',
'217,218,567,215,410,264,962,-98,-100,412,411,577,576,580,579,749,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,642',
'263,-288,-288,-288,-289,790,-288,264,729,-288,727,-289,-288,-288,-97',
'-288,573,-288,726,-288,-289,-288,-288,-288,-288,-288,-288,-288,-106',
'-288,885,-288,564,-512,561,560,559,569,562,221,-512,-92,1005,710,-288',
'-288,-288,-288,572,-288,-605,-288,217,218,888,-101,891,-605,-605,-605',
'893,-104,-605,-605,-605,564,-605,561,560,559,567,562,851,822,895,-605',
'-605,-605,-605,577,576,580,579,116,221,897,-605,-605,115,-605,-605,-605',
'-605,-605,116,898,725,717,564,115,561,560,559,719,562,564,715,561,560',
'559,713,562,722,694,711,573,906,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,-605,-605,710,241,-605,-605,-605,719,789,-605,-262',
'910,-605,912,719,-605,-605,913,-605,221,-605,710,-605,722,-605,-605',
'-605,-605,-605,-605,-605,241,-605,-605,-605,238,916,592,116,240,239',
'236,237,115,593,918,116,-605,-605,-605,-605,115,-605,591,-605,748,295',
'72,73,74,12,60,747,238,-102,66,67,240,239,920,70,749,68,69,71,33,34',
'75,76,119,120,121,122,123,32,31,30,104,103,105,106,874,875,22,922,876',
'110,111,653,11,48,922,13,108,107,109,98,59,100,99,101,221,102,110,111',
'707,94,95,928,45,46,44,241,245,250,251,252,247,249,257,258,253,254,-288',
'234,235,748,116,255,256,-288,43,115,962,36,-602,221,61,62,-288,116,63',
'749,38,238,115,244,47,240,239,236,237,248,246,242,23,243,930,700,213',
'91,83,85,86,87,89,214,932,699,84,92,694,259,536,-239,212,221,65,683',
'-84,81,88,90,221,221,96,97,295,72,73,74,12,60,221,221,523,66,67,241',
'942,943,70,524,68,69,71,33,34,75,76,221,522,946,-265,241,32,31,30,104',
'103,105,106,241,241,22,652,272,641,640,637,11,48,221,13,108,107,109',
'98,59,100,99,101,956,102,110,111,636,94,95,-262,45,46,44,241,245,250',
'251,252,247,249,257,258,253,254,-288,234,235,-289,634,255,256,-288,43',
'963,-289,297,-602,964,61,62,-288,627,63,-289,38,238,966,244,47,240,239',
'236,237,248,246,242,23,243,967,624,-515,91,83,85,86,87,89,-515,-335',
'621,84,92,617,259,595,-335,-515,594,65,402,590,81,88,90,-335,506,96',
'97,295,72,73,74,12,60,547,983,-289,66,67,546,985,986,70,-289,68,69,71',
'33,34,75,76,540,-289,241,990,532,32,31,30,104,103,105,106,528,710,22',
'995,997,999,1001,653,11,48,1001,13,108,107,109,98,59,100,99,101,272',
'102,110,111,221,94,95,275,45,46,44,241,245,250,251,252,247,249,257,258',
'253,254,-514,234,235,-515,1008,255,256,-514,43,525,-515,297,518,517',
'61,62,-514,221,63,-515,38,238,1013,244,47,240,239,236,237,248,246,242',
'23,243,-69,1014,1011,91,83,85,86,87,89,1012,-280,922,84,92,922,259,922',
'-280,1010,1019,65,506,983,81,88,90,-280,504,96,97,295,72,73,74,12,60',
'501,272,454,66,67,491,220,460,70,455,68,69,71,33,34,75,76,459,456,457',
'413,408,32,31,30,104,103,105,106,392,959,22,561,560,559,-602,562,11',
'48,-601,13,108,107,109,98,59,100,99,101,699,102,110,111,389,94,95,386',
'45,46,44,241,245,250,251,252,247,249,257,258,253,254,-288,234,235,-514',
'383,255,256,-288,43,359,-514,36,-602,221,61,62,-288,320,63,-514,38,238',
'983,244,47,240,239,236,237,248,246,242,23,243,319,1042,1043,91,83,85',
'86,87,89,1044,1045,1001,84,92,221,259,1001,1001,221,260,65,216,211,81',
'88,90,210,922,96,97,295,72,73,74,12,60,983,209,112,66,67,1001,,,70,',
'68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,,',
'22,119,120,121,122,123,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234',
'235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237',
'248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88',
'90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119',
'120,121,122,123,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252',
'247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,',
',36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235',
',,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248',
'246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90',
',,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257',
'258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47',
'240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259',
',,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252',
'247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,',
',36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235',
',,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248',
'246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90',
',,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257',
'258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47',
'240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259',
',,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252',
'247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,',
',36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,295,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235',
',,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248',
'246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90',
',,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257',
'258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47',
'240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259',
',,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,564,22,561,560,559,241,562',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'564,,561,560,559,,562,238,719,,,240,239,236,237,,,927,,43,,,36,241,',
'61,62,,,63,,38,,,,47,,,719,255,256,,,23,,,,,91,83,85,86,87,89,,238,',
'84,92,240,239,236,237,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,241,245,250,251,252,247,249,257,258,253,254,,-624,-624,,,255,256',
',43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23',
'243,,,,91,83,85,86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90',
',,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,719,,',
',,32,31,30,104,103,105,106,,564,22,561,560,559,,562,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624',
'-624,-624,247,249,,719,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63',
',38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87',
'89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,295,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,719,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,297,,,61,62,,,63,',
'38,238,,244,47,240,239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,',
',,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257',
',253,254,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624',
'247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624',
'-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
',,,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,,,253',
'254,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237',
'248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624,247,249',
',,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,295,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624',
'247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251',
'252,247,249,257,258,253,254,,-624,-624,,,255,256,,43,,,36,,,61,62,,',
'63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,-624,-624,-624,-624,247,249,,,-624,-624,,,,,,255,256,,226,,,232',
',,61,62,,,63,,,238,,244,47,240,239,236,237,248,246,242,231,243,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,,,,,,,,,,,,,,,,255,256,,226,,,232,,,61,62,,,63,,,238,,244,47,240',
'239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,288,102,110,111,,94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,226',
',,232,,,61,62,,,63,,284,238,282,244,47,240,239,236,237,,,,231,,,,,91',
'285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95',
',45,46,44,241,,,,,,,,,,,,,,,,255,256,,226,,,232,,,61,62,,,63,,284,238',
'282,244,47,240,239,236,237,,,,231,,,,,91,285,85,86,87,89,,,,84,286,',
',,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
'221,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,,,47,,,,,,,,231,,,,,91,285,85',
'86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,677,,,,47',
',,,,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,353,,,36,,,61,62',
',,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,',
'308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,',
',65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,310,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,',
',,,,,,,306,,,302,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,418,,,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,',
',,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,',
',,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,,,232,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,318,,,65,,,81,88,90',
',,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,402,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,900',
',,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313',
'75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,',
',302,,,61,62,,,63,,301,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,285,85,86,87,89,',
',,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,',
',108,107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,',
',,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91',
'285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,418,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284',
',282,,47,,,,,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,418,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,221,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75',
'76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,,,282,,47,,,,,,,,231,,,,,91,285,85',
'86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,',
'233,,,,,,,310,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'316,,,,,,,,,,,,,,,,,,,,900,,,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75',
'76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75',
'76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,973,,,232,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,',
'308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,285,85,86,87,89,,,,84,286',
',,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,',
',,,306,,,302,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,285,85,86,87',
'89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,',
'48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,',
',,91,285,85,86,87,89,,,,84,286,221,,,,,,65,,289,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,',
',,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,310,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,,,302,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75',
'76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,285',
'85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,,,47',
',,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,,,302,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308',
'309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,',
',,,308,309,315,104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,,,232,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,520,,,65,,,81',
'88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61',
'62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,402',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313',
'75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,226,,,232,,,61,62,,,63,,,,282,,47,,,,,,,,231,,,,,91,285,85,86,87',
'89,,,,84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,310,,,108,107,109,596,59,100,99,597,,102',
'110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,598,,,232,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,310,,,108,107,109,596,59,100,99,597,,102',
'110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,598,,,232,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,310,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,316,,,,,,,,,,,,,,,,,,,,306,,,302,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,282,,47,,,,,,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76',
',,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59',
'100,99,101,288,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,677,,282,,47,,,,,,,,231,,,,,91,285,85,86,87,89,,',
',84,286,,,,,,,65,,289,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,226,,,232,536,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309,315,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,288,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,677,,282,,47,,,',
',,,,231,,,,,91,285,85,86,87,89,,,,84,286,,,,,,,65,,289,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,,308,309',
'315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
'677,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75,76,,,,,',
'308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312,313,75',
'76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,312',
'313,75,76,,,,,,308,309,315,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,771,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281',
'-281,564,-281,561,560,559,569,562,,,,,-281,-281,-281,,,572,,,,,-281',
'-281,,-281,-281,-281,-281,-281,,,,,,,,,,567,,,,,,,,,577,576,580,579',
',-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
',,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,573,-281,,-281,,-281',
'-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281',
'-281,-606,-281,,-281,,,,-606,-606,-606,,,-606,-606,-606,564,-606,561',
'560,559,569,562,,,,-606,-606,-606,-606,,,572,,,,,-606,-606,,-606,-606',
'-606,-606,-606,,,,,,,,,,567,,,,,,,,,,,580,579,,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606',
',,-606,,,-606,-606,,-606,573,-606,,-606,,-606,-606,-606,-606,-606,-606',
'-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,-607,-606,,-606',
',,,-607,-607,-607,,,-607,-607,-607,564,-607,561,560,559,569,562,,,,-607',
'-607,-607,-607,,,572,,,,,-607,-607,,-607,-607,-607,-607,-607,,,,,,,',
',,567,,,,,,,,,,,580,579,,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,,,-607,-607,-607,,,-607,,,-607,,,-607,-607',
',-607,573,-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607,-607',
'-607,,,,,,,,,,,,,-607,-607,-607,-607,,-607,,-607,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,368,367,369,366,172,191,190,,,,,',
'171,178,169,170,363,364,365,361,129,100,99,362,,102,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,375,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,',
',,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,',
',,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
',,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,399,398,128,,400,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,-424,,165,,,',
',-424,-424,-424,,,-424,-424,-424,564,-424,561,560,559,569,562,158,,',
'-424,-424,-424,,,,572,,,,,-424,-424,,-424,-424,-424,-424,-424,,,,,,',
',,,567,,,,,,,,,,,580,579,,-424,-424,-424,-424,-424,-424,-424,-424,-424',
'-424,-424,-424,-424,-424,,,-424,-424,-424,,,-424,,272,-424,,,-424,-424',
',-424,573,-424,,-424,,-424,-424,-424,-424,-424,-424,-424,,-424,-424',
'-424,,,,,,,,,,,,-295,-424,-424,,-424,,-424,-295,-295,-295,,,-295,-295',
'-295,564,-295,561,560,559,569,562,,,,,-295,-295,,,,572,,,,,-295,-295',
',-295,-295,-295,-295,-295,,,,,,,,,,567,,,,,,,,,577,576,580,579,,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295',
'-295,-295,,,-295,,275,-295,,,-295,-295,,-295,573,-295,,-295,,-295,-295',
'-295,-295,-295,-295,-295,,-295,,-295,,,,,,,,,,,,-623,-295,-295,,-295',
',-295,-623,-623,-623,,,-623,-623,-623,564,-623,561,560,559,569,562,',
',,-623,-623,,,,,572,,,,,-623,-623,,-623,-623,-623,-623,-623,,,564,,561',
'560,559,569,562,567,,,,,,,,,572,,580,579,,-623,,,,,,,-623,-623,-623',
',-623,-623,-623,-623,,-623,567,-623,,,,,272,-623,-623,-623,-623,580',
'579,,573,,,,,-623,-623,,-623,-623,-623,-623,-623,,-623,-623,,,,,,,,',
',,,,-623,,,573,,-623,,,-623,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,,,-623,-623,-623,,,-623,,272,-623,,,-623,-623',
',-623,,-623,,-623,,-623,-623,-623,-623,-623,-623,-623,,-623,-623,-623',
',,,,,1037,439,,,1038,,,-623,-623,,-623,,-623,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,1035,432,,,1036,,',
',,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,655,432,,,656,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,657,439,,,658,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,489,432,,,490,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,428,432,,,429,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,435,439,,,434,,,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,657,439,,,658,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,655,432,,,656,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,564,165,561,560,559,569,562,564,,561,560,559',
'569,562,,,572,,,,,158,,572,,,,,,,,,,,,,,,567,,,,,,,567,,577,576,580',
'579,,,,859,439,580,579,860,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,573,163,164,149,150,,,573,,,272,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562',
'564,,561,560,559,569,562,,,572,,,,,158,,572,,,,,564,,561,560,559,569',
'562,,,,567,,,,,,572,567,,577,576,580,579,,,,577,576,580,579,,,,,,,,564',
'567,561,560,559,569,562,,,,489,432,580,579,490,,572,,573,,,,,161,162',
'573,157,139,140,141,148,145,147,,,142,143,,567,,163,164,149,150,,,573',
'577,576,580,579,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,221,,,690,439,,,691,573,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,687,432,,,688,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,1007,439,,,1006,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,739,432,,,740,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,741,439,,,742,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,564,,561',
'560,559,569,562,,,572,,,,,158,,572,564,,561,560,559,569,562,,,,,,,,567',
',572,,,,,567,,577,576,580,579,,,,,,580,579,,,,564,567,561,560,559,569',
'562,,,,,,580,579,,564,572,561,560,559,569,562,573,,,,,,,573,,572,,,',
',,,567,564,,561,560,559,569,562,573,,,580,579,,,567,550,572,,,,,,,577',
'576,580,579,564,,561,560,559,569,562,,,,,567,757,,,,572,573,,,577,576',
'580,579,,,,,,,,,573,,,,,,567,757,,,,,,,,577,576,580,579,,,,,,573,,,',
',,,,,,,,,,,,,,,,,,,,,,,573' ]
        racc_action_table = arr = ::Array.new(26495, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'435,931,387,343,1,760,760,435,435,435,602,311,22,435,435,885,435,366',
'351,354,735,464,669,1035,366,435,885,29,496,730,1036,909,1037,344,64',
'381,435,435,381,435,435,435,435,435,1050,598,697,697,22,598,549,688',
'687,464,857,856,669,464,464,885,885,723,496,387,387,387,487,435,435',
'435,435,435,435,435,435,435,435,435,435,435,435,586,742,435,435,435',
'594,435,452,452,668,435,29,885,435,760,381,381,311,435,487,435,739,435',
'435,435,435,435,435,435,1037,435,435,435,29,931,602,343,688,687,931',
'64,343,351,354,434,435,435,721,435,350,435,434,434,434,602,697,1035',
'434,434,602,434,1035,435,1036,909,1037,344,742,1036,909,1037,344,688',
'687,549,688,687,1050,857,858,434,434,1050,434,434,434,434,434,856,688',
'687,856,706,856,741,740,668,452,587,393,586,80,791,817,508,586,742,495',
'698,80,594,434,434,434,434,434,434,434,434,434,434,434,434,434,434,390',
'739,434,434,434,682,434,988,457,988,434,44,44,434,316,316,495,696,434',
'682,434,693,434,434,434,434,434,434,434,350,434,817,434,791,692,741',
'622,393,817,859,508,508,508,689,98,434,434,817,434,656,434,98,98,98',
'858,686,98,98,98,858,98,508,434,390,457,817,728,728,98,655,98,98,98',
'587,741,740,333,597,587,333,98,98,684,98,98,98,98,98,364,707,44,44,859',
'316,316,364,753,622,622,859,707,753,42,224,859,656,622,227,859,690,225',
'98,98,98,98,98,98,98,98,98,98,98,98,98,98,655,859,98,98,98,597,98,98',
'707,707,98,619,597,98,98,738,98,597,98,42,98,597,98,98,98,98,98,98,98',
'361,98,676,98,42,224,674,361,690,227,597,320,225,707,667,690,98,98,98',
'98,690,98,101,98,690,384,328,328,770,101,101,101,365,98,101,101,101',
'661,101,365,307,659,690,619,619,650,101,307,101,101,101,332,619,320',
'332,596,307,337,101,101,337,101,101,101,101,101,722,320,722,722,722',
'775,722,644,927,395,927,927,927,1005,927,1005,1005,1005,379,1005,384',
'384,384,101,101,101,101,101,101,101,101,101,101,101,101,101,101,639',
'362,101,101,101,596,101,101,362,635,101,631,596,101,101,629,101,596',
'101,429,101,596,101,101,101,101,101,101,101,626,101,367,101,395,395',
'395,377,702,367,596,702,722,379,379,379,101,101,101,101,927,101,658',
'101,41,638,710,710,589,658,658,658,429,101,658,658,658,550,658,550,550',
'550,550,550,322,368,429,369,658,658,658,322,368,550,369,342,342,588',
'658,658,322,658,658,658,658,658,41,638,377,377,377,371,899,20,20,550',
'18,126,371,899,41,638,126,126,550,550,550,550,899,658,658,658,658,658',
'658,658,658,658,658,658,658,658,658,428,27,658,658,658,745,658,658,27',
'583,658,581,745,658,658,18,658,550,658,578,658,745,658,658,658,658,658',
'658,658,18,658,793,658,888,363,888,888,888,888,888,957,363,428,957,794',
'658,658,658,658,888,658,657,658,754,754,796,428,797,657,657,657,798',
'658,657,657,657,567,657,567,567,567,888,567,1021,1021,800,657,657,657',
'657,888,888,888,888,347,801,802,657,657,347,657,657,657,657,657,292',
'803,574,566,981,292,981,981,981,567,981,719,557,719,719,719,556,719',
'567,816,555,888,820,657,657,657,657,657,657,657,657,657,657,657,657',
'657,657,553,482,657,657,657,981,657,657,823,824,657,828,719,657,657',
'829,657,830,657,831,657,719,657,657,657,657,657,657,657,463,657,657',
'657,482,835,352,758,482,482,482,482,758,352,836,5,657,657,657,657,5',
'657,352,657,600,906,906,906,906,906,906,600,463,657,906,906,463,463',
'838,906,600,906,906,906,906,906,906,906,294,294,294,294,294,906,906',
'906,906,906,906,906,761,761,906,839,761,761,761,447,906,906,841,906',
'906,906,906,906,906,906,906,906,844,906,906,906,552,906,906,846,906',
'906,906,447,447,447,447,447,447,447,447,447,447,447,1038,447,447,961',
'940,447,447,1038,906,940,961,906,1038,539,906,906,1038,866,906,961,906',
'447,866,447,906,447,447,447,447,447,447,447,906,447,849,538,17,906,906',
'906,906,906,906,17,852,537,906,906,529,447,526,447,17,521,906,519,516',
'906,906,906,515,862,906,906,302,302,302,302,302,302,498,497,305,302',
'302,468,867,868,302,305,302,302,302,302,302,302,302,869,305,878,879',
'467,302,302,302,302,302,302,302,466,465,302,444,436,427,426,422,302',
'302,423,302,302,302,302,302,302,302,302,302,896,302,302,302,419,302',
'302,417,302,302,302,422,422,422,422,422,422,422,422,422,422,422,691',
'422,422,1013,414,422,422,691,302,900,1013,302,691,901,302,302,691,392',
'302,1013,302,422,903,422,302,422,422,422,422,422,422,422,302,422,904',
'389,304,302,302,302,302,302,302,304,49,386,302,302,383,422,355,49,304',
'353,302,349,348,302,302,302,49,338,302,302,297,297,297,297,297,297,335',
'929,525,297,297,334,933,934,297,525,297,297,297,297,297,297,297,330',
'525,324,939,321,297,297,297,297,297,297,297,317,947,297,950,951,952',
'953,660,297,297,955,297,297,297,297,297,297,297,297,297,315,297,297',
'297,310,297,297,309,297,297,297,660,660,660,660,660,660,660,660,660',
'660,660,970,660,660,971,965,660,660,970,297,306,971,297,300,299,297',
'297,970,298,297,971,297,660,973,660,297,660,660,660,660,660,660,660',
'297,660,296,976,972,297,297,297,297,297,297,972,974,977,297,297,978',
'660,979,974,972,980,297,283,982,297,297,297,974,280,297,297,762,762',
'762,762,762,762,279,268,223,762,762,265,233,229,762,223,762,762,762',
'762,762,762,762,228,223,226,207,124,762,762,762,762,762,762,762,90,897',
'762,897,897,897,1006,897,762,762,1007,762,762,762,762,762,762,762,762',
'762,1009,762,762,762,89,762,762,88,762,762,762,486,486,486,486,486,486',
'486,486,486,486,486,860,486,486,303,87,486,486,860,762,72,303,762,860',
'48,762,762,860,43,762,303,762,486,1020,486,762,486,486,486,486,486,486',
'486,762,486,40,1025,1026,762,762,762,762,762,762,1027,1028,1029,762',
'762,486,486,1030,1031,1034,25,762,19,16,762,762,762,15,1039,762,762',
'585,585,585,585,585,585,1040,13,3,585,585,1052,,,585,,585,585,585,585',
'585,585,585,9,9,9,9,9,585,585,585,585,585,585,585,,,585,514,514,514',
'514,514,585,585,,585,585,585,585,585,585,585,585,585,,585,585,585,,585',
'585,,585,585,585,786,786,786,786,786,786,786,786,786,786,786,,786,786',
',,786,786,,585,,,585,,,585,585,,,585,,585,786,,786,585,786,786,786,786',
'786,786,786,585,786,,,,585,585,585,585,585,585,,,,585,585,,786,,,,,585',
',,585,585,585,,,585,585,984,984,984,984,984,984,,,,984,984,,,,984,,984',
'984,984,984,984,984,984,681,681,681,681,681,984,984,984,984,984,984',
'984,,,984,,,,,,984,984,,984,984,984,984,984,984,984,984,984,,984,984',
'984,,984,984,,984,984,984,784,784,784,784,784,784,784,784,784,784,784',
',784,784,,,784,784,,984,,,984,,,984,984,,,984,,984,784,,784,984,784',
'784,784,784,784,784,784,984,784,,,,984,984,984,984,984,984,,,,984,984',
',784,,,,,984,,,984,984,984,,,984,984,582,582,582,582,582,582,,,,582',
'582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582',
'582,,,582,,,,,,582,582,,582,582,582,582,582,582,582,582,582,,582,582',
'582,,582,582,,582,582,582,782,782,782,782,782,782,782,782,782,782,782',
',782,782,,,782,782,,582,,,582,,,582,582,,,582,,582,782,,782,582,782',
'782,782,782,782,782,782,582,782,,,,582,582,582,582,582,582,,,,582,582',
',782,,,,,582,,,582,582,582,,,582,582,854,854,854,854,854,854,,,,854',
'854,,,,854,,854,854,854,854,854,854,854,,,,,,854,854,854,854,854,854',
'854,,,854,,,,,,854,854,,854,854,854,854,854,854,854,854,854,,854,854',
'854,,854,854,,854,854,854,779,779,779,779,779,779,779,779,779,779,779',
',779,779,,,779,779,,854,,,854,,,854,854,,,854,,854,779,,779,854,779',
'779,779,779,779,779,779,854,779,,,,854,854,854,854,854,854,,,,854,854',
',779,,,,,854,,,854,854,854,,,854,854,989,989,989,989,989,989,,,,989',
'989,,,,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989',
'989,,,989,,,,,,989,989,,989,989,989,989,989,989,989,989,989,,989,989',
'989,,989,989,,989,989,989,777,777,777,777,777,777,777,777,777,777,777',
',777,777,,,777,777,,989,,,989,,,989,989,,,989,,989,777,,777,989,777',
'777,777,777,777,777,777,989,777,,,,989,989,989,989,989,989,,,,989,989',
',777,,,,,989,,,989,989,989,,,989,989,992,992,992,992,992,992,,,,992',
'992,,,,992,,992,992,992,992,992,992,992,,,,,,992,992,992,992,992,992',
'992,,,992,,,,,,992,992,,992,992,992,992,992,992,992,992,992,,992,992',
'992,,992,992,,992,992,992,772,772,772,772,772,772,772,772,772,772,772',
',772,772,,,772,772,,992,,,992,,,992,992,,,992,,992,772,,772,992,772',
'772,772,772,772,772,772,992,772,,,,992,992,992,992,992,992,,,,992,992',
',772,,,,,992,,,992,992,992,,,992,992,232,232,232,232,232,232,,,,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,232,232,,232,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,232,277,277,277,277,277,277,277,277,277,277,277',
',277,277,,,277,277,,232,,,232,,,232,232,,,232,,232,277,,277,232,277',
'277,277,277,277,277,277,232,277,,,,232,232,232,232,232,232,,,,232,232',
',277,,,,,232,,,232,232,232,,,232,232,993,993,993,993,993,993,,,,993',
'993,,,,993,,993,993,993,993,993,993,993,,,,,,993,993,993,993,993,993',
'993,,,993,,,,,,993,993,,993,993,993,993,993,993,993,993,993,,993,993',
'993,,993,993,,993,993,993,695,695,695,695,695,695,695,695,695,695,695',
',695,695,,,695,695,,993,,,993,,,993,993,,,993,,993,695,,695,993,695',
'695,695,695,695,695,695,993,695,,,,993,993,993,993,993,993,,,,993,993',
',695,,,,,993,,,993,993,993,,,993,993,969,969,969,969,969,969,,,,969',
'969,,,,969,,969,969,969,969,969,969,969,,,,,,969,969,969,969,969,969',
'969,,,969,,,,,,969,969,,969,969,969,969,969,969,969,969,969,,969,969',
'969,,969,969,,969,969,969,881,881,881,881,881,881,881,881,881,881,881',
',881,881,,,881,881,,969,,,969,,,969,969,,,969,,969,881,,881,969,881',
'881,881,881,881,881,881,969,881,,,,969,969,969,969,969,969,,,,969,969',
',881,,,,,969,,,969,969,969,,,969,969,902,902,902,902,902,902,,,,902',
'902,,,,902,,902,902,902,902,902,902,902,,,,,,902,902,902,902,902,902',
'902,,,902,,,,,,902,902,,902,902,902,902,902,902,902,902,902,,902,902',
'902,,902,902,,902,902,902,24,24,24,24,24,24,24,24,24,24,24,,24,24,,',
'24,24,,902,,,902,,,902,902,,,902,,902,24,,24,902,24,24,24,24,24,24,24',
'902,24,,,,902,902,902,902,902,902,,,,902,902,,24,,,,,902,,,902,902,902',
',,902,902,756,756,756,756,756,756,,,,756,756,,,,756,,756,756,756,756',
'756,756,756,,,,,,756,756,756,756,756,756,756,,,756,,,,,,756,756,,756',
'756,756,756,756,756,756,756,756,,756,756,756,,756,756,,756,756,756,884',
'884,884,884,884,884,884,884,884,884,884,,884,884,,,884,884,,756,,,756',
',,756,756,,,756,,756,884,,884,756,884,884,884,884,884,884,884,756,884',
',,,756,756,756,756,756,756,,,,756,756,,884,,,,,756,,,756,756,756,,,756',
'756,853,853,853,853,853,853,,,,853,853,,,,853,,853,853,853,853,853,853',
'853,,,,,,853,853,853,853,853,853,853,,,853,,,,,,853,853,,853,853,853',
'853,853,853,853,853,853,,853,853,853,,853,853,,853,853,853,535,535,535',
'535,535,535,535,535,535,535,535,,535,535,,,535,535,,853,,,853,,,853',
'853,,,853,,853,535,,535,853,535,535,535,535,535,535,535,853,535,,,,853',
'853,853,853,853,853,,,,853,853,,535,,,,,853,,,853,853,853,,,853,853',
'807,807,807,807,807,807,,,,807,807,,,,807,,807,807,807,807,807,807,807',
',,,,,807,807,807,807,807,807,807,,,807,,,,,,807,807,,807,807,807,807',
'807,807,807,807,807,,807,807,807,,807,807,,807,807,807,442,442,442,442',
'442,442,442,442,442,442,442,,442,442,,,442,442,,807,,,807,,,807,807',
',,807,,807,442,,442,807,442,442,442,442,442,442,442,807,442,,,,807,807',
'807,807,807,807,,,,807,807,,442,,,,,807,,,807,807,807,,,807,807,811',
'811,811,811,811,811,,,,811,811,,,,811,,811,811,811,811,811,811,811,',
',,,,811,811,811,811,811,811,811,,845,811,845,845,845,483,845,811,811',
',811,811,811,811,811,811,811,811,811,,811,811,811,,811,811,,811,811',
'811,928,,928,928,928,,928,483,845,,,483,483,483,483,,,845,,811,,,811',
'471,,811,811,,,811,,811,,,,811,,,928,471,471,,,811,,,,,811,811,811,811',
'811,811,,471,,811,811,471,471,471,471,,,811,,,811,811,811,,,811,811',
'209,209,209,209,209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,,209,209,209,209,209,209,209,,,209,,,,,,209,209,,209,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,461,461,461,461',
'461,461,461,461,461,461,461,,461,461,,,461,461,,209,,,209,,,209,209',
',,209,,209,461,,461,209,461,461,461,461,461,461,461,209,461,,,,209,209',
'209,209,209,209,,,,209,209,,1019,,1019,1019,1019,209,1019,,209,209,209',
',,209,209,408,408,408,408,408,408,,,,408,408,,,,408,,408,408,408,408',
'408,408,408,1019,,,,,408,408,408,408,408,408,408,,983,408,983,983,983',
',983,408,408,408,408,408,408,408,408,408,408,408,408,,408,408,408,,408',
'408,,408,408,408,472,472,472,472,472,472,472,,983,472,472,,,,,,472,472',
',408,,,408,,,408,408,,,408,,408,472,,472,408,472,472,472,472,472,472',
'472,408,472,,,,408,408,408,408,408,408,,,,408,408,,847,,847,847,847',
'408,847,,408,408,408,,,408,408,36,36,36,36,36,36,,,,36,36,,,,36,,36',
'36,36,36,36,36,36,847,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36',
'36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,473,,,,,,,,,,,,,,,,473',
'473,,36,,,36,,,36,36,,,36,,36,473,,473,36,473,473,473,473,,,473,36,473',
',,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36,36,812,812,812',
'812,812,812,,,,812,812,,,,812,,812,812,812,812,812,812,812,,,,,,812',
'812,812,812,812,812,812,,,812,,,,,,812,812,,812,812,812,812,812,812',
'812,812,812,,812,812,812,,812,812,,812,812,812,474,,,,,,,,,,,,,,,,474',
'474,,812,,,812,,,812,812,,,812,,812,474,,474,812,474,474,474,474,,,474',
'812,474,,,,812,812,812,812,812,812,,,,812,812,,,,,,,812,,,812,812,812',
',,812,812,936,936,936,936,936,936,,,,936,936,,,,936,,936,936,936,936',
'936,936,936,,,,,,936,936,936,936,936,936,936,,,936,,,,,,936,936,,936',
'936,936,936,936,936,936,936,936,,936,936,936,,936,936,,936,936,936,485',
'485,485,485,485,485,485,485,,485,485,,,,,,485,485,,936,,,936,,,936,936',
',,936,,936,485,,485,936,485,485,485,485,485,485,485,936,485,,,,936,936',
'936,936,936,936,,,,936,936,,,,,,,936,,,936,936,936,,,936,936,863,863',
'863,863,863,863,,,,863,863,,,,863,,863,863,863,863,863,863,863,,,,,',
'863,863,863,863,863,863,863,,,863,,,,,,863,863,,863,863,863,863,863',
'863,863,863,863,,863,863,863,,863,863,,863,863,863,480,480,480,480,480',
'480,480,,,480,480,,,,,,480,480,,863,,,863,,,863,863,,,863,,863,480,',
'480,863,480,480,480,480,480,480,480,863,480,,,,863,863,863,863,863,863',
',,,863,863,,,,,,,863,,,863,863,863,,,863,863,755,755,755,755,755,755',
',,,755,755,,,,755,,755,755,755,755,755,755,755,,,,,,755,755,755,755',
'755,755,755,,,755,,,,,,755,755,,755,755,755,755,755,755,755,755,755',
',755,755,755,,755,755,,755,755,755,481,481,481,481,481,481,481,,,481',
'481,,,,,,481,481,,755,,,755,,,755,755,,,755,,755,481,,481,755,481,481',
'481,481,481,481,481,755,481,,,,755,755,755,755,755,755,,,,755,755,,',
',,,,755,,,755,755,755,,,755,755,705,705,705,705,705,705,,,,705,705,',
',,705,,705,705,705,705,705,705,705,,,,,,705,705,705,705,705,705,705',
',,705,,,,,,705,705,,705,705,705,705,705,705,705,705,705,,705,705,705',
',705,705,,705,705,705,476,,,,,,,,,,,,,,,,476,476,,705,,,705,,,705,705',
',,705,,705,476,,476,705,476,476,476,476,,,476,705,476,,,,705,705,705',
'705,705,705,,,,705,705,,,,,,,705,,,705,705,705,,,705,705,704,704,704',
'704,704,704,,,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,,704',
'704,704,704,704,704,704,,,704,,,,,,704,704,,704,704,704,704,704,704',
'704,704,704,,704,704,704,,704,704,,704,704,704,484,484,484,484,484,484',
'484,,,484,484,,,,,,484,484,,704,,,704,,,704,704,,,704,,704,484,,484',
'704,484,484,484,484,484,484,484,704,484,,,,704,704,704,704,704,704,',
',,704,704,,,,,,,704,,,704,704,704,,,704,704,822,822,822,822,822,822',
',,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822,822',
'822,822,822,,,822,,,,,,822,822,,822,822,822,822,822,822,822,822,822',
',822,822,822,,822,822,,822,822,822,478,478,478,478,478,478,478,,,478',
'478,,,,,,478,478,,822,,,822,,,822,822,,,822,,822,478,,478,822,478,478',
'478,478,478,478,478,822,478,,,,822,822,822,822,822,822,,,,822,822,,',
',,,,822,,,822,822,822,,,822,822,327,327,327,327,327,327,,,,327,327,',
',,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327',
',,327,,,,,,327,327,,327,327,327,327,327,327,327,327,327,,327,327,327',
',327,327,,327,327,327,477,477,477,477,477,477,477,,,477,477,,,,,,477',
'477,,327,,,327,,,327,327,,,327,,327,477,,477,327,477,477,477,477,477',
'477,477,327,477,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327',
'327,327,,,327,327,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2',
'2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,462,462',
'462,462,462,462,462,462,462,462,462,,462,462,,,462,462,,2,,,2,,,2,2',
',,2,,2,462,,462,2,462,462,462,462,462,462,462,2,462,,,,2,2,2,2,2,2,',
',,2,2,,,,,,,2,,,2,2,2,,,2,2,282,282,282,,282,,,,282,282,,,,282,,282',
'282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,',
',282,,,282,282,282,282,282,282,282,282,,282,282,282,,282,282,,282,282',
'282,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,,282,,,282,,',
'282,282,,,282,,,479,,479,282,479,479,479,479,479,479,479,282,479,,,',
'282,282,282,282,282,282,,,,282,282,,,,,,,282,,,282,282,282,,,282,282',
'851,851,851,,851,,,,851,851,,,,851,,851,851,851,851,851,851,851,,,,',
',851,851,851,851,851,851,851,,,851,,,,,,,851,,,851,851,851,851,851,851',
'851,851,,851,851,851,,851,851,,851,851,851,475,,,,,,,,,,,,,,,,475,475',
',851,,,851,,,851,851,,,851,,,475,,475,851,475,475,475,475,,,475,851',
'475,,,,851,851,851,851,851,851,,,,851,851,,,,,,,851,,,851,851,851,,',
'851,851,749,749,749,,749,,,,749,749,,,,749,,749,749,749,749,749,749',
'749,,,,,,749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749,749',
'749,749,749,749,749,749,749,749,,749,749,,749,749,749,469,,,,,,,,,,',
',,,,,469,469,,749,,,749,,,749,749,,,749,,749,469,749,469,749,469,469',
'469,469,,,,749,,,,,749,749,749,749,749,749,,,,749,749,,,,,,,749,,749',
'749,749,749,,,749,749,456,456,456,,456,,,,456,456,,,,456,,456,456,456',
'456,456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456',
'456,456,456,456,456,456,456,456,456,456,456,,456,456,,456,456,456,470',
',,,,,,,,,,,,,,,470,470,,456,,,456,,,456,456,,,456,,456,470,456,470,456',
'470,470,470,470,,,,456,,,,,456,456,456,456,456,456,,,,456,456,,,,,,',
'456,,456,456,456,456,,,456,456,61,61,61,,61,,,,61,61,,,,61,,61,61,61',
'61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61',
'61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61',
'61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61',
',,61,61,61,,,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62',
',,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62',
'62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62',
',,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62',
',,62,62,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63',
'63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,',
'63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,',
',,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,542',
'542,542,,542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,,542',
'542,542,542,542,542,542,,,542,,,,,,,542,,,542,542,542,542,542,542,542',
'542,542,542,542,542,,542,542,,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542',
',,542,542,,,542,,542,,,,542,,,,,,,,542,,,,,542,542,542,542,542,542,',
',,542,542,,,,,,,542,,542,542,542,542,,,542,542,66,66,66,,66,,,,66,66',
',,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66',
',,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,',
',,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,',
'66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67',
'67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67',
'67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,',
'67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67',
',,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70',
',,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70',
'70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,',
'70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70',
',,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,',
',71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,545,545,545',
',545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545',
'545,545,545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,545',
'545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545',
'545,,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545',
',,,,,,545,,545,545,545,545,,,545,545,46,46,46,,46,,,,46,46,,,,46,,46',
'46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46',
'46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46',
',,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,',
'46,,,46,46,46,,,46,46,694,694,694,,694,,,,694,694,,,,694,,694,694,694',
'694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694,,,694',
'694,694,694,694,694,694,694,,694,694,694,,694,694,,,,694,,,,,,,,,,,',
',,,,,,,,694,,,694,,,694,694,,,694,,,,,,,,,,,,,,,,,,,694,694,694,694',
'694,694,,,,694,694,,,,,,,694,,,694,694,694,,,694,694,45,45,45,,45,,',
',45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,',
',,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,',
',,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45',
'45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,699,699,699,,699,,,,699,699',
',,,699,,699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699,699',
',,699,,,,,,,699,,,699,699,699,699,699,699,699,699,,699,699,699,,699',
'699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,699,',
',,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,,,,,,,699,,',
'699,699,699,,,699,699,1010,1010,1010,,1010,,,,1010,1010,,,,1010,,1010',
'1010,1010,1010,1010,1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010',
',,1010,,,,,,,1010,,,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010',
'1010,1010,,1010,1010,,1010,1010,1010,,,,,,,,,,,,,,,,,,,,1010,,,1010',
',,1010,1010,,,1010,,1010,,1010,,1010,,,,,,,,1010,,,,,1010,1010,1010',
'1010,1010,1010,,,,1010,1010,,,,,,,1010,,1010,1010,1010,1010,,,1010,1010',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,418,418,418,,418,,,,418',
'418,,,,418,,418,418,418,418,418,418,418,,,,,,418,418,418,418,418,418',
'418,,,418,,,,,,,418,,,418,418,418,418,418,418,418,418,,418,418,418,',
'418,418,,418,418,418,,,,,,,,,,,,,,,,,,,,418,,,418,,,418,418,,,418,,',
',,,418,,,,,,,,418,,,,,418,418,418,418,418,418,,,,418,418,,,,,,,418,',
',418,418,418,,,418,418,459,459,459,,459,,,,459,459,,,,459,,459,459,459',
'459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459,,,459',
'459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459,,,,,',
',,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,,,459',
'459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459,38',
'38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38',
'38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,',
',,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38',
'38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,114,114,114,114,114,,,',
'114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114',
'114,114,,,114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,',
'114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114',
'114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114',
'114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119,,119,,,,119,119',
',,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119',
',,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,,119',
'119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119',
',,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119',
'119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120',
'120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120',
'120,120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,',
',,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120',
'120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121',
',121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121',
'121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121',
'121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121',
',,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,',
',,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122',
'122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,',
',122,,,122,122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122',
'122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122',
',,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122',
'122,123,123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123',
',,,,,123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123',
'123,123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,',
',,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123',
'123,123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,898,898,898',
',898,,,,898,898,,,,898,,898,898,898,898,898,898,898,,,,,,898,898,898',
'898,898,898,898,,,898,,,,,,,898,,,898,898,898,898,898,898,898,898,,898',
'898,898,,898,898,,,,898,,,,,,,,,,,,,,,,,,,,898,,,898,,,898,898,,,898',
',,,,,,,,,,,,,,,,,,898,898,898,898,898,898,,,,898,898,,,,,,,898,,,898',
'898,898,,,898,898,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37',
',,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37',
'37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,',
',,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,33,33,33,',
'33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,',
'33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,',
',,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33',
'33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,32,32,32',
',32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,',
',32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32',
',,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32',
'32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,460,460,460,,460',
',,,460,460,,,,460,,460,460,460,460,460,460,460,,,,,,460,460,460,460',
'460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460,460,460,,460,460',
'460,,460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460',
',,,,,460,,,,,,,,460,,,,,460,460,460,460,460,460,,,,460,460,,,,,,,460',
',,460,460,460,,,460,460,215,215,215,,215,,,,215,215,,,,215,,215,215',
'215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215',
',,215,215,215,215,215,215,215,215,,215,215,215,,215,215,,215,215,215',
',,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,',
',215,215,215,215,215,215,,,,215,215,,,,,,,215,,,215,215,215,,,215,215',
'216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,',
',216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216',
'216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,',
'216,,,216,216,,,216,,216,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216',
',,,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217',
'217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217',
'217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,',
'217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,',
',217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,',
',,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218',
'218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219',
'219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219',
',,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,',
',220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,',
',220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220',
',220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,',
',,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,220,,,,,,220,,,220',
'220,220,,,220,220,536,536,536,,536,,,,536,536,,,,536,,536,536,536,536',
'536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536,536',
'536,536,536,536,536,536,,536,536,536,,536,536,,536,536,536,,,,,,,,,',
',,,,,,,,,,536,,,536,,,536,536,,,536,,,,,,536,,,,,,,,536,,,,,536,536',
'536,536,536,536,,,,536,536,,,,,,,536,,,536,536,536,,,536,536,883,883',
'883,,883,,,,883,883,,,,883,,883,883,883,883,883,883,883,,,,,,883,883',
'883,883,883,883,883,,,883,,,,,,,883,,,883,883,883,883,883,883,883,883',
',883,883,883,,883,883,,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883',
'883,,,883,,,,,,883,,,,,,,,883,,,,,883,883,883,883,883,883,,,,883,883',
',,,,,,883,,,883,883,883,,,883,883,570,570,570,,570,,,,570,570,,,,570',
',570,570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570',
',,,,,,570,,,570,570,570,570,570,570,570,570,,570,570,570,,570,570,,570',
'570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570,,,,,,',
',570,,,,,570,570,570,570,570,570,,,,570,570,,,,,,,570,,,570,570,570',
',,570,570,882,882,882,,882,,,,882,882,,,,882,,882,882,882,882,882,882',
'882,,,,,,882,882,882,882,882,882,882,,,882,,,,,,,882,,,882,882,882,882',
'882,882,882,882,882,882,882,882,,882,882,,882,882,882,,,,,,,,,,,,,,',
',,,,,882,,,882,,,882,882,,,882,,,,882,,882,,,,,,,,882,,,,,882,882,882',
'882,882,882,,,,882,882,,,,,,,882,,882,882,882,882,,,882,882,804,804',
'804,,804,,,,804,804,,,,804,,804,804,804,804,804,804,804,,,,,,804,804',
'804,804,804,804,804,,,804,,,,,,,804,,,804,804,804,804,804,804,804,804',
',804,804,804,,804,804,,,,804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804',
',,804,,,,,,,,,,,,,,,,,,,804,804,804,804,804,804,,,,804,804,,,,,,,804',
',,804,804,804,,,804,804,792,792,792,,792,,,,792,792,,,,792,,792,792',
'792,792,792,792,792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,,792',
',,792,792,792,792,792,792,792,792,,792,792,792,,792,792,,792,792,792',
',,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,',
',792,792,792,792,792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792,792',
'532,532,532,,532,,,,532,532,,,,532,,532,532,532,532,532,532,532,,,,',
',532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532',
'532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,,,,,,,,,,,,532,,',
'532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532,532,532,532,532',
',,,532,532,,,,,,,532,,,532,532,532,,,532,532,231,231,231,,231,,,,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,',
'231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,',
',,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,',
',231,231,231,,,231,231,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,',
',,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23',
',,23,23,717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717',
'717,,,,,,717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717',
'717,717,717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,',
',,717,,,717,,,717,717,,,717,,,,,,717,,,,,,,,717,,,,,717,717,717,717',
'717,717,,,,717,717,,,,,,,717,,,717,717,717,,,717,717,234,234,234,,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234',
',,234,234,234,,,234,234,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239',
',,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239',
'239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
',240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,',
',,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240',
'240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247',
'247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,',
',248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,',
',248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259',
'259,910,910,910,,910,,,,910,910,,,,910,,910,910,910,910,910,910,910',
',,,,,910,910,910,910,910,910,910,,,910,,,,,,,910,,,910,910,910,910,910',
'910,910,910,,910,910,910,,910,910,,,,910,,,,,,,,,,,,,,,,,,,,910,,,910',
',,910,910,,,910,,,,,,,,,,,,,,,,,,,910,910,910,910,910,910,,,,910,910',
',,,,,,910,,,910,910,910,,,910,910,531,531,531,,531,,,,531,531,,,,531',
',531,531,531,531,531,531,531,,,,,,531,531,531,531,531,531,531,,,531',
',,,,,,531,,,531,531,531,531,531,531,531,531,,531,531,531,,531,531,,531',
'531,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531,531,,,531,,,,,,531,,,,,,',
',531,,,,,531,531,531,531,531,531,,,,531,531,,,,,,,531,,,531,531,531',
',,531,531,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266',
'266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266',
'266,266,266,266,266,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,',
',,,,,266,,,266,,,266,266,,,266,,266,,266,,266,,,,,,,,266,,,,,266,266',
'266,266,266,266,,,,266,266,,,,,,,266,,266,266,266,266,,,266,266,683',
'683,683,,683,,,,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683',
'683,683,683,683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683',
'683,,683,683,683,,683,683,,,,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683',
'683,,,683,,,,,,,,,,,,,,,,,,,683,683,683,683,683,683,,,,683,683,,,,,',
',683,,,683,683,683,,,683,683,272,272,272,,272,,,,272,272,,,,272,,272',
'272,272,272,272,272,272,,,,,,272,272,272,272,272,272,272,,,272,,,,,',
',272,,,272,272,272,272,272,272,272,272,272,272,272,272,,272,272,,272',
'272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,272,,272,,272',
',,,,,,,272,,,,,272,272,272,272,272,272,,,,272,272,,,,,,,272,,272,272',
'272,272,,,272,272,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275',
'275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275',
'275,275,275,275,275,275,275,275,275,275,,275,275,,275,275,275,,,,,,',
',,,,,,,,,,,,,275,,,275,,,275,275,,,275,,275,,275,,275,,,,,,,,275,,,',
',275,275,275,275,275,275,,,,275,275,275,,,,,,275,,275,275,275,275,,',
'275,275,743,743,743,,743,,,,743,743,,,,743,,743,743,743,743,743,743',
'743,,,,,,743,743,743,743,743,743,743,,,743,,,,,,,743,,,743,743,743,743',
'743,743,743,743,,743,743,743,,743,743,,743,743,743,,,,,,,,,,,,,,,,,',
',,743,,,743,,,743,743,,,743,,,,,,743,,,,,,,,743,,,,,743,743,743,743',
'743,743,,,,743,743,,,,,,,743,,,743,743,743,,,743,743,528,528,528,,528',
',,,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528',
'528,528,528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528',
'528,,528,528,,,,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,',
',,,,,,,,,,,,,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528',
'528,,,528,528,680,680,680,,680,,,,680,680,,,,680,,680,680,680,680,680',
'680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680',
'680,680,680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,',
',,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680',
'680,680,680,,,,680,680,,,,,,,680,,,680,680,680,,,680,680,47,47,47,,47',
',,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47',
',,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,',
',,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47',
'47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,677,677,677,,677,,,,677,677',
',,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677',
',,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,,677',
'677,,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677',
',,,,,,,677,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677',
'677,,,677,677,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284',
'284,284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284',
'284,284,284,284,284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,',
',,,,,,284,,,284,,,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284',
'284,284,284,,,,284,284,,,,,,,284,,,284,284,284,,,284,284,286,286,286',
',286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286',
'286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286',
'286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286',
',,286,,,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,',
',,,286,,,286,286,286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288',
'288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,',
',288,,,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288',
'288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288',
',,,,288,288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288',
'288,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289',
',,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289',
'289,289,289,,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289',
',,289,,,289,289,,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289,289',
',,,289,289,,,,,,,289,,,289,289,289,,,289,289,790,790,790,,790,,,,790',
'790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790,790,790',
'790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790,',
'790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,',
',,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790,',
',790,790,790,,,790,790,522,522,522,,522,,,,522,522,,,,522,,522,522,522',
'522,522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522',
'522,522,522,522,522,522,522,522,522,522,522,,522,522,,522,522,522,,',
',,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,522,,522,,522,,,,,,,,522',
',,,,522,522,522,522,522,522,,,,522,522,,,,,,,522,,522,522,522,522,,',
'522,522,295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295,295,295',
'295,,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,,295,295,295',
'295,295,295,295,295,295,,295,295,295,,295,295,,295,295,295,,,,,,,,,',
',,,,,,,,,,295,,,295,,,295,295,,,295,,295,,,,295,,,,,,,,295,,,,,295,295',
'295,295,295,295,,,,295,295,,,,,,,295,,,295,295,295,,,295,295,737,737',
'737,,737,,,,737,737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737',
'737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737,737,737,737,737',
',737,737,737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737,,,737',
'737,,,737,,737,,,,737,,,,,,,,737,,,,,737,737,737,737,737,737,,,,737',
'737,,,,,,,737,,,737,737,737,,,737,737,520,520,520,,520,,,,520,520,,',
',520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,',
',520,,,,,,,520,,,520,520,520,520,520,520,520,520,,520,520,520,,520,520',
',,,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,,,,,,,,,,,',
',,520,520,520,520,520,520,,,,520,520,,,,,,,520,,,520,520,520,,,520,520',
'789,789,789,,789,,,,789,789,,,,789,,789,789,789,789,789,789,789,,,,',
',789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789,789,789,789',
'789,789,,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,,,,,,,,789,,',
'789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,,,789,789,789,789,789,789',
',,,789,789,,,,,,,789,,,789,789,789,,,789,789,771,771,771,,771,,,,771',
'771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771,771',
'771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771,',
'771,771,,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,',
',,,771,,,,,,,,771,,,,,771,771,771,771,771,771,,,,771,771,,,,,,,771,',
',771,771,771,,,771,771,788,788,788,,788,,,,788,788,,,,788,,788,788,788',
'788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,,,788,,,788',
'788,788,788,788,788,788,788,,788,788,788,,788,788,,788,788,788,,,,,',
',,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,788,,,,,788',
'788,788,788,788,788,,,,788,788,,,,,,,788,,,788,788,788,,,788,788,301',
'301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301',
'301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301',
'301,,301,301,301,,301,301,,,,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,,,,,,,,,,,,,,301,301,301,301,301,301,,,,301,301,,,,301',
',,301,,,301,301,301,,,301,301,513,513,513,513,513,,,,513,513,,,,513',
',513,513,513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513',
',,,,,513,513,,513,513,513,513,513,513,513,513,513,,513,513,513,,513',
'513,,513,513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,513,',
',,513,,,,,,,,513,,,,,513,513,513,513,513,513,,,,513,513,,,,,,513,513',
',,513,513,513,,,513,513,506,506,506,,506,,,,506,506,,,,506,,506,506',
'506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,,506',
',,506,506,506,506,506,506,506,506,,506,506,506,,506,506,,506,506,506',
',,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,506,,,,,,,,506,,,',
',506,506,506,506,506,506,,,,506,506,,,,,,,506,,,506,506,506,,,506,506',
'504,504,504,,504,,,,504,504,,,,504,,504,504,504,504,504,504,504,,,,',
',504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504,504,504',
'504,504,504,504,504,504,,504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504',
',,504,,,504,504,,,504,,,,504,,504,,,,,,,,504,,,,,504,504,504,504,504',
'504,,,,504,504,,,,,,,504,,504,504,504,504,,,504,504,653,653,653,,653',
',,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653',
'653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,653,,653,653',
'653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653',
',,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653',
',,653,653,653,,,653,653,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,',
',,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8',
'8,,,,,,,8,,,8,8,8,,,8,8,652,652,652,,652,,,,652,652,,,,652,,652,652',
'652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652',
',,652,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,652',
',,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,,,,,652,,,,,,,,652,,,',
',652,652,652,652,652,652,,,,652,652,,,,,,,652,,,652,652,652,,,652,652',
'591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591,591,,,,',
',591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591,591,591',
'591,591,591,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,,,591',
',,591,,,591,591,,,591,,591,,591,,591,,,,,,,,591,,,,,591,591,591,591',
'591,591,,,,591,591,,,,,,,591,,591,591,591,591,,,591,591,773,773,773',
',773,,,,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773',
'773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773',
'773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773',
',,773,,,,,,773,,,,,,,,773,,,,,773,773,773,773,773,773,,,,773,773,,,',
',,,773,,,773,773,773,,,773,773,360,360,360,,360,,,,360,360,,,,360,,360',
'360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,',
',360,,,360,360,360,360,360,360,360,360,,360,360,360,,360,360,,,,360',
',,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,,,,,,,,,,,,,,360,360',
'360,360,360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360,360,649,649',
'649,,649,,,,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649',
'649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649',
',649,649,649,,649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649',
'649,,,649,,,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649',
',,,,,,649,,,649,649,649,,,649,649,648,648,648,,648,,,,648,648,,,,648',
',648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648',
',,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,,648,648,,648',
'648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,',
',648,,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648,648',
',,648,648,358,358,358,,358,,,,358,358,,,,358,,358,358,358,358,358,358',
'358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358,358',
'358,358,358,358,,358,358,358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,,358',
',,358,,,358,358,,,358,,,,,,,,,,,,,,,,,,,358,358,358,358,358,358,,,,358',
'358,,,,,,,358,,,358,358,358,,,358,358,318,318,318,,318,,,,318,318,,',
',318,,318,318,318,318,318,318,318,,,,,,318,318,318,318,318,318,318,',
',318,,,,,,,318,,,318,318,318,318,318,318,318,318,,318,318,318,,318,318',
',,,318,,,,,,,,,,,,,,,,,,,,318,,,318,,,318,318,,,318,,,,,,,,,,,,,,,,',
',,318,318,318,318,318,318,,,,318,318,,,,,,,318,,,318,318,318,,,318,318',
'643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,',
',643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643',
'643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,',
'643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643',
',,,643,643,,,,,,,643,,,643,643,643,,,643,643,642,642,642,,642,,,,642',
'642,,,,642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642',
'642,,,642,,,,,,,642,,,642,642,642,642,642,642,642,642,,642,642,642,',
'642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,',
',,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,',
',642,642,642,,,642,642,641,641,641,,641,,,,641,641,,,,641,,641,641,641',
'641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641',
'641,641,641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,',
',,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,,,641,,641,,,,,,,,641,,',
',,641,641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641,641,,,641',
'641,501,501,501,,501,,,,501,501,,,,501,,501,501,501,501,501,501,501',
',,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501',
'501,501,501,501,501,501,501,,501,501,,501,501,501,,,,,,,,,,,,,,,,,,',
',501,,,501,,,501,501,,,501,,501,,501,,501,,,,,,,,501,,,,,501,501,501',
'501,501,501,,,,501,501,,,,,,,501,,501,501,501,501,,,501,501,326,326',
'326,,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326',
'326,326,326,326,326,,,326,,,,,,,326,,,326,326,326,326,326,326,326,326',
',326,326,326,,326,326,,326,326,326,,,,,,,,,,,,,,,,,,,,326,,,326,326',
',326,326,,,326,,,,,,326,,,,,,,,326,,,,,326,326,326,326,326,326,,,,326',
'326,,,,,,,326,,,326,326,326,,,326,326,864,864,864,,864,,,,864,864,,',
',864,,864,864,864,864,864,864,864,,,,,,864,864,864,864,864,864,864,',
',864,,,,,,,864,,,864,864,864,864,864,864,864,864,,864,864,864,,864,864',
',864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,864,',
',,,,,,864,,,,,864,864,864,864,864,864,,,,864,864,,,,,,,864,,,864,864',
'864,,,864,864,640,640,640,,640,,,,640,640,,,,640,,640,640,640,640,640',
'640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,,,640,,,640,640,640',
'640,640,640,640,640,640,640,640,640,,640,640,,640,640,640,,,,,,,,,,',
',,,,,,,,,640,,,640,,,640,640,,,640,,640,,640,,640,,,,,,,,640,,,,,640',
'640,640,640,640,640,,,,640,640,,,,,,,640,,640,640,640,640,,,640,640',
'935,935,935,,935,,,,935,935,,,,935,,935,935,935,935,935,935,935,,,,',
',935,935,935,935,935,935,935,,,935,,,,,,,935,,,935,935,935,935,935,935',
'935,935,,935,935,935,,935,935,,935,935,935,,,,,,,,,,,,,,,,,,,,935,,',
'935,,,935,935,,,935,,935,,,,935,,,,,,,,935,,,,,935,935,935,935,935,935',
',,,935,935,,,,,,,935,,,935,935,935,,,935,935,637,637,637,,637,,,,637',
'637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637',
'637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,',
'637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,',
',637,637,637,,,637,637,345,345,345,,345,,,,345,345,,,,345,,345,345,345',
'345,345,345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345',
'345,345,345,345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,',
',,,,,,,,,,,,,,345,,,345,,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345',
'345,345,345,345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,603',
'603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603',
'603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603',
'603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603',
',,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603',
'603,,,,,,,603,,,603,603,603,,,603,603,346,346,346,,346,,,,346,346,,',
',346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346,',
',346,,,,,,,346,,,346,346,346,346,346,346,346,346,,346,346,346,,346,346',
',346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,346,,,346,,,,,,346,',
',,,,,,346,,,,,346,346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346',
'346,,,346,346,787,787,787,,787,,,,787,787,,,,787,,787,787,787,787,787',
'787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,,,787,,,787,787,787',
'787,787,787,787,787,,787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,',
',,,,,,787,,,787,,,787,787,,,787,,,,,,787,,,,,,,,787,,,,,787,787,787',
'787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787,607,607,607',
',607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607',
'607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607,,607',
'607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607',
',,607,,,,,,607,,,,,,,,607,,,,,607,607,607,607,607,607,,,,607,607,,,',
',,,607,,,607,607,607,,,607,607,636,636,636,,636,,,,636,636,,,,636,,636',
'636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,',
',636,,,636,636,636,636,636,636,636,636,,636,636,636,,636,636,,636,636',
'636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,636,,,,636,,,,,,,',
'636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,,636,636,636,59',
',636,636,,,,59,59,59,,,59,59,59,891,59,891,891,891,891,891,,,,,59,59',
'59,,,891,,,,,59,59,,59,59,59,59,59,,,,,,,,,,891,,,,,,,,,891,891,891',
'891,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59',
',,59,59,,59,891,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59',
'59,59,59,439,59,,59,,,,439,439,439,,,439,439,439,893,439,893,893,893',
'893,893,,,,439,439,439,439,,,893,,,,,439,439,,439,439,439,439,439,,',
',,,,,,,893,,,,,,,,,,,893,893,,439,439,439,439,439,439,439,439,439,439',
'439,439,439,439,,,439,439,439,,,439,,,439,,,439,439,,439,893,439,,439',
',439,439,439,439,439,439,439,,439,439,439,,,,,,,,,,,,,439,439,439,439',
'440,439,,439,,,,440,440,440,,,440,440,440,1001,440,1001,1001,1001,1001',
'1001,,,,440,440,440,440,,,1001,,,,,440,440,,440,440,440,440,440,,,,',
',,,,,1001,,,,,,,,,,,1001,1001,,440,440,440,440,440,440,440,440,440,440',
'440,440,440,440,,,440,440,440,,,440,,,440,,,440,440,,440,1001,440,,440',
',440,440,440,440,440,440,440,,440,440,440,,,,,,,,,,,,,440,440,440,440',
',440,,440,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,,,,633,633,633,633,633,633,633,633',
'633,633,,,,,,633,633,633,633,633,633,633,633,633,,,633,,,,,,,,,633,633',
',633,633,633,633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,,,,,',
',,,633,633,,633,633,633,633,633,633,633,633,633,633,633,,,633,633,,',
',,,,,,,633,,,,,,,,,633,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74',
'74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74',
'74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74',
'74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11',
'11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,759,759,759,759,759',
'759,759,759,759,759,759,759,759,759,759,759,759,759,759,759,759,759',
'759,759,,,,759,759,759,759,759,759,759,759,759,759,,,,,,759,759,759',
'759,759,759,759,759,759,,,759,,,,,,,,,759,759,,759,759,759,759,759,759',
'759,,,759,759,,,,759,759,759,759,,,,,,,,,,,,,,759,759,,759,759,759,759',
'759,759,759,759,759,759,759,,,759,,,,,,,,,,,,,,,,,,,,759,409,409,409',
'409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409',
'409,409,409,409,,,,409,409,409,409,409,409,409,409,409,409,,,,,,409',
'409,409,409,409,409,409,409,409,,,409,,,,,,,,,409,409,,409,409,409,409',
'409,409,409,,,409,409,,,,409,409,409,409,,,,,,,,,,,,,,409,409,,409,409',
'409,409,409,409,409,409,409,409,409,,,409,409,,,,,,,,,,409,,,,,,,,,409',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91',
'91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,',
',,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,30',
',91,,,,,30,30,30,,,30,30,30,1014,30,1014,1014,1014,1014,1014,91,,,30',
'30,30,,,,1014,,,,,30,30,,30,30,30,30,30,,,,,,,,,,1014,,,,,,,,,,,1014',
'1014,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30',
'30,,,30,30,,30,1014,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,',
',,31,30,30,,30,,30,31,31,31,,,31,31,31,711,31,711,711,711,711,711,,',
',,31,31,,,,711,,,,,31,31,,31,31,31,31,31,,,,,,,,,,711,,,,,,,,,711,711',
'711,711,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,',
'31,31,,,31,31,,31,711,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,',
',,488,31,31,,31,,31,488,488,488,,,488,488,488,999,488,999,999,999,999',
'999,,,,488,488,,,,,999,,,,,488,488,,488,488,488,488,488,,,997,,997,997',
'997,997,997,999,,,,,,,,,997,,999,999,,430,,,,,,,430,430,430,,488,430',
'430,430,,430,997,488,,,,,488,488,430,430,430,997,997,,999,,,,,430,430',
',430,430,430,430,430,,488,488,,,,,,,,,,,,,488,,,997,,488,,,430,430,430',
'430,430,430,430,430,430,430,430,430,430,430,,,430,430,430,,,430,,430',
'430,,,430,430,,430,,430,,430,,430,430,430,430,430,430,430,,430,430,430',
',,,,,1012,1012,,,1012,,,430,430,,430,,430,1012,1012,,1012,1012,1012',
'1012,1012,1012,1012,,,1012,1012,,,,1012,1012,1012,1012,,,,,,1012,,,',
',,,,1012,1012,,1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,1012',
',,1012,,,,,1011,1011,,,1011,,,,,,,,,1011,1011,1012,1011,1011,1011,1011',
'1011,1011,1011,,,1011,1011,,,,1011,1011,1011,1011,,,,,,1011,,,,,,,,1011',
'1011,,1011,1011,1011,1011,1011,1011,1011,1011,1011,1011,1011,,,1011',
',,,,454,454,,,454,,,,,,,,,454,454,1011,454,454,454,454,454,454,454,',
',454,454,,,,454,454,454,454,,,,,,454,,,,,,,,454,454,,454,454,454,454',
'454,454,454,454,454,454,454,,,454,,,,,455,455,,,455,,,,,,,,,455,455',
'454,455,455,455,455,455,455,455,,,455,455,,,,455,455,455,455,,,,,,455',
',,,,,,,455,455,,455,455,455,455,455,455,455,455,455,455,455,,,455,,',
',,748,748,,,748,,,,,,,,,748,748,455,748,748,748,748,748,748,748,,,748',
'748,,,,748,748,748,748,,,,,,748,,,,,,,,748,748,,748,748,748,748,748',
'748,748,748,748,748,748,,,748,,,,,213,213,,,213,,,,,,,,,213,213,748',
'213,213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,',
',,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,,',
'214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,534,534,,,534,,,,,,,,,534,534,214',
'534,534,534,534,534,534,534,,,534,534,,,,534,534,534,534,,,,,,534,,',
',,,,,534,534,,534,534,534,534,534,534,534,534,534,534,534,,,534,,,,',
'533,533,,,533,,,,,,,,,533,533,534,533,533,533,533,533,533,533,,,533',
'533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533,,533,533,533,533,533',
'533,533,533,533,533,533,,713,533,713,713,713,713,713,715,,715,715,715',
'715,715,,,713,,,,,533,,715,,,,,,,,,,,,,,,713,,,,,,,715,,713,713,713',
'713,,,,747,747,715,715,747,,,,,,,,,747,747,,747,747,747,747,747,747',
'747,,,747,747,,,713,747,747,747,747,,,715,,,747,,,,,,,,747,747,,747',
'747,747,747,747,747,747,747,747,747,747,,757,747,757,757,757,757,757',
'995,,995,995,995,995,995,,,757,,,,,747,,995,,,,,1045,,1045,1045,1045',
'1045,1045,,,,757,,,,,,1045,995,,757,757,757,757,,,,995,995,995,995,',
',,,,,,664,1045,664,664,664,664,664,,,,262,262,1045,1045,262,,664,,757',
',,,,262,262,995,262,262,262,262,262,262,262,,,262,262,,664,,262,262',
'262,262,,,1045,664,664,664,664,,,,,,,262,262,,262,262,262,262,262,262',
'262,262,262,262,262,,,262,,664,,,524,524,,,524,664,,,,,,,,524,524,262',
'524,524,524,524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,,',
',,,,,524,524,,524,524,524,524,524,524,524,524,524,524,524,,,524,,,,',
'523,523,,,523,,,,,,,,,523,523,524,523,523,523,523,523,523,523,,,523',
'523,,,,523,523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523',
'523,523,523,523,523,523,,,523,,,,,962,962,,,962,,,,,,,,,962,962,523',
'962,962,962,962,962,962,962,,,962,962,,,,962,962,962,962,,,,,,962,,',
',,,,,962,962,,962,962,962,962,962,962,962,962,962,962,962,,,962,,,,',
'592,592,,,592,,,,,,,,,592,592,962,592,592,592,592,592,592,592,,,592',
'592,,,,592,592,592,592,,,,,,592,,,,,,,,592,592,,592,592,592,592,592',
'592,592,592,592,592,592,,,592,,,,,593,593,,,593,,,,,,,,,593,593,592',
'593,593,593,593,593,593,593,,,593,593,,,,593,593,593,593,,,,,,593,,',
',,,,,593,593,,593,593,593,593,593,593,593,593,593,593,593,,916,593,916',
'916,916,916,916,918,,918,918,918,918,918,,,916,,,,,593,,918,920,,920',
'920,920,920,920,,,,,,,,916,,920,,,,,918,,916,916,916,916,,,,,,918,918',
',,,922,920,922,922,922,922,922,,,,,,920,920,,341,922,341,341,341,341',
'341,916,,,,,,,918,,341,,,,,,,922,605,,605,605,605,605,605,920,,,922',
'922,,,341,341,605,,,,,,,341,341,341,341,945,,945,945,945,945,945,,,',
',605,605,,,,945,922,,,605,605,605,605,,,,,,,,,341,,,,,,945,945,,,,,',
',,945,945,945,945,,,,,,605,,,,,,,,,,,,,,,,,,,,,,,,,,,945' ]
        racc_action_check = arr = ::Array.new(26495, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,     4,  4869,  1353,   nil,   645,   nil,   nil, 19989,  1329,
   nil, 24005, 24404,  1240,   nil,  1198,  1250,   816,   481,  1193,
   529,   nil,   -78, 12149,  2613,  1307,   nil,   518,   nil,     2,
 24649, 24774,  9909,  9349,  9209,   nil,  3600,  9069,  7949,   nil,
  1186,   429,   221,  1243,   156,  7109,  6829, 17329,  1168,   965,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23347,
   nil,  5569,  5709,  5849,     9,   nil,  6129,  6269,   nil,   nil,
  6409,  6549,  1207,   nil, 23872,   nil,   nil,   nil,   nil,   nil,
    66,   nil,   nil,   nil,   nil,   nil,   nil,  1155,  1136,  1133,
  1109, 24537,   nil,   nil,   nil,   nil,   nil,   nil,   250,   nil,
   nil,   382,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  8089,   nil,   nil,   nil,   nil,  8229,
  8369,  8509,  8649,  8789,  1119,   nil,   516,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1101,   nil,  3318,
  9489,  9629,  9769, 25374, 25442, 10189, 10329, 10469, 10609, 10749,
 10889,   nil,   nil,  1134,   222,   229,  1174,   226,  1084,  1130,
   nil, 12009,  2190,  1126, 12429, 12569, 12709, 12849, 12989, 13129,
 13269, 13409, 13549, 13689, 13829, 13969, 14109, 14249, 14389, 14529,
 14669, 14809, 14949, 15089, 15229, 15369, 15509, 15649, 15789, 15929,
   nil,   nil, 25831,   nil,   nil,  1118, 16349,   nil,  1121,   nil,
   nil,   nil, 16629,   nil,   nil, 16769,   nil,  2190,   nil,  1081,
  1072,   nil,  5009,  1107, 17609,   nil, 17749,   nil, 17889, 18029,
   nil,   nil,   564,   nil,   765, 18449,  1031,  1062,  1031,  1062,
  1023, 19289,   921,  1206,   957,   852,  1094,   322,   nil,  1035,
   996,   -14,   nil,   nil,   nil,  1028,   159,   969, 21109,   nil,
   284,  1023,   458,   nil,  1021,   nil, 21809,  4728,   350,   nil,
   995,   nil,   285,   156,   979,   956,   nil,   291,   972,   nil,
   nil, 26309,   511,    -9,    21, 22509, 22789,   553,  1039,   923,
   106,    -6,   684,   997,    -5,  1025,   nil,   nil, 20969,   nil,
 20549,   282,   386,   551,   216,   314,   -61,   416,   459,   461,
   nil,   485,   nil,   nil,   nil,   nil,   nil,   439,   nil,   384,
   nil,   -25,   nil,   924,   325,   nil,   921,   -58,   nil,   911,
   146,   nil,   893,   120,   nil,   375,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3459, 24271,
   nil,   nil,   nil,   nil,   890,   nil,   nil,   855,  7669,   852,
   nil,   nil,   921,   841,   nil,   nil,   834,   833,   508,   395,
 24966,   nil,   nil,   nil,   125,     0,   871,   nil,   nil, 23477,
 23607,   nil,  3036,   nil,   817,   nil,   nil,   780,   nil,   nil,
   nil,   nil,    52,   nil, 25170, 25238,  5429,   127,  7529,  7809,
 10049,  3318,  4869,   689,   -46,   891,   890,   882,   866,  5289,
  5429,  3200,  3459,  3600,  3741,  5149,  4305,  4728,  4587,  5009,
  4023,  4164,   661,  3152,  4446,  3882,  1203,    -9, 24899,   nil,
   nil,   nil,   nil,   nil,   nil,   113,   -47,   803,   802,   nil,
   nil, 21669,   nil,   nil, 19709,   nil, 19569,   nil,   125,   nil,
   nil,   nil,   nil, 19429,  1344,   792,   785,   nil,   nil,   784,
 18729,   785, 18309, 25967, 25899,   993,   818,   nil, 17049,   777,
   nil, 16209, 11869, 25578, 25510,  2895, 11029,   896,   884,   745,
   nil,   nil,  5989,   nil,   nil,  6689,   nil,   nil,   nil,    22,
   478,   nil,   711,   598,   nil,   581,   577,   573,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   550,   610,   nil,   nil,
 11309,   nil,   nil,   nil,   641,   nil,   nil,   nil,   563,   nil,
   nil,   555,  1626,   592,   nil,  1344,    55,   153,   533,   511,
   nil, 20269, 26103, 26171,    62,   nil,   390,   258,    -6,   nil,
   702,   nil,     9, 22649,   nil, 26333,   nil, 23069,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,
   nil,   nil,   182,   nil,   nil,   nil,   362,   nil,   nil,   348,
   nil,   361,   nil, 23739,   nil,   343, 23209, 22369,   430,   368,
 22089, 21529, 21389, 21249,   336,   nil,   nil,   nil, 20829, 20689,
   308,   nil, 20129, 19849,   nil,   188,   168,   646,   514,   275,
  1062,   269,   nil,   nil, 25821,   nil,   nil,   347,    65,   -53,
   nil,   nil,   nil,   nil,   237,   nil,   274, 17469,   nil,   nil,
 17189,  1470,    82, 16489,   159,   nil,   135,    28,    27,   159,
   290,   921,   150,    98,  6969,  2331,   156,    10,   175,  7249,
   nil,   nil,   374,   nil,  4446,  4305,    47,   239,   nil,   nil,
   418, 24738,   nil, 25640,   nil, 25647,   nil, 12289,   nil,   650,
   nil,    -1,   375,   -65,   nil,   nil,   nil,   nil,   259,   nil,
    15,   nil,   nil,   nil,   nil,    11,   nil, 18589,   220,    78,
   152,   151,    58, 16909,   nil,   522,   nil, 25694, 25306,  5289,
   nil,   nil,   nil,   176,   612,  4164,  2754, 25756,   637, 24138,
   -31,   763,  1203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   259, 19009,  2049, 20409,   nil,   302,   nil,  1908,   nil,  1767,
   nil,   nil,  1626,   nil,  1485,   nil,  1344, 22929, 19149, 18869,
 18169,    96, 11729,   497,   510,   nil,   521,   523,   527,   nil,
   561,   554,   550,   548, 11589,   nil,   nil,  3036,   nil,   nil,
   nil,  3177,  3741,   nil,   nil,   nil,   580,   159,   nil,   nil,
   704,   nil,  4587,   606,   648,   nil,   nil,   nil,   625,   733,
   618,   617,   nil,   nil,   nil,   632,   641,   nil,   665,   690,
   nil,   697,   nil,   nil,   710,  3163,   714,  3535,   nil,   883,
   nil,  5149,   893,  2895,  1767,   nil,    43,    30,   134,   220,
  1203,   nil,   793,  4023, 21949,   nil,   749,   925,   926,   819,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   834,   819,
   nil,  2472, 11449, 11169,  2754,   -41,   nil,   nil,   577,   nil,
   nil, 23311,   nil, 23441,   nil,   nil,   868,  1189,  8929,   486,
   953,  1003,  2613,   908,  1024,   nil,   780,   nil,   nil,    19,
 16069,   nil,   nil,   nil,   nil,   nil, 26233,   nil, 26240,   nil,
 26257,   nil, 26294,   nil,   nil,   nil,   nil,   383,  3193,   941,
   nil,   -11,   nil,  1066,  1067, 22229,  3882,   nil,   nil,  1080,
   736,   nil,   nil,   nil,   nil, 26360,   nil,   970,   nil,   nil,
   972,   973,   974,   975,   nil,   979,   nil,   509,   nil,   nil,
   nil,   783, 26035,   nil,   nil,  1031,   nil,   nil,   nil,  2472,
  1062,  1065,  1098,  1107,  1106,   nil,  1046,  1056,  1059,  1061,
  1064,   643,  1067,  3445,  1485,   nil,   nil,   nil,   199,  1908,
   nil,   nil,  2049,  2331,   nil, 25763,   nil, 24894,   nil, 24863,
   nil, 23571,   nil,   nil,   nil,   388,  1155,  1159,   nil,  1252,
  7389, 25102, 25034,   924, 24613,   nil,   nil,   nil,   nil,  3394,
  1174,   655,   nil,   nil,   nil,  1307,  1308,  1315,  1196,  1197,
  1202,  1203,   nil,   nil,  1207,    11,    18,    20,   780,  1213,
  1222,   nil,   nil,   nil,   nil, 25784,   nil,   nil,   nil,   nil,
    32,   nil,  1227,   nil ]

racc_action_default = [
    -1,  -624,  -623,  -624,    -2,  -610,    -4,    -5,  -624,    -8,
    -9,  -624,  -624,  -624,   -29,  -624,  -624,  -624,  -280,  -624,
   -40,   -43,  -612,  -624,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -623,   -73,   -81,   -83,
  -624,  -514,  -515,  -624,  -624,  -624,  -624,  -624,  -612,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -612,  -623,  -623,  -300,  -403,  -624,  -624,  -305,  -308,
  -610,  -624,  -316,  -323,  -624,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -623,  -453,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1054,    -3,  -611,  -619,  -620,  -621,    -7,  -624,
  -624,  -624,  -624,  -624,  -624,   -17,  -624,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -623,
  -624,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -612,  -613,   -47,  -624,  -514,  -515,  -624,  -280,  -624,  -624,
  -230,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -409,  -412,  -624,  -608,  -609,   -58,  -624,  -299,  -624,  -426,
  -429,   -64,  -623,  -423,   -65,  -612,   -66,  -239,  -252,  -623,
  -623,  -256,  -624,  -262,  -624,  -623,  -490,  -591,  -624,  -624,
   -67,   -68,  -610,   -13,   -14,  -624,   -71,  -623,  -612,  -624,
   -74,   -77,  -623,   -89,   -90,  -624,  -624,   -97,  -292,  -295,
  -612,  -416,  -331,  -332,  -335,  -424,  -624,   -79,  -624,   -85,
  -289,  -497,  -624,  -215,  -216,  -231,  -624,  -623,  -285,  -284,
  -624,  -240,  -616,  -616,  -624,  -624,  -589,  -616,  -624,  -301,
  -302,  -546,   -49,  -624,  -624,  -624,  -624,  -610,  -624,  -611,
  -514,  -515,  -624,  -624,  -280,  -624,  -356,  -357,  -624,  -319,
  -624,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,
  -326,  -624,  -514,  -515,  -586,  -587,  -451,  -624,  -474,  -624,
  -476,  -624,  -478,  -624,  -624,  -458,  -624,  -624,  -464,  -624,
  -624,  -470,  -624,  -624,  -472,  -624,  -489,  -491,  -492,  -493,
  -494,    -6,  -622,   -23,   -24,   -25,   -26,   -27,  -623,  -624,
   -19,   -20,   -21,  -122,  -624,   -30,   -39,  -267,  -624,  -624,
  -266,   -31,  -197,  -612,  -247,  -248,  -623,  -623,  -601,  -602,
  -257,  -421,  -603,  -604,  -602,  -601,  -257,  -420,  -422,  -603,
  -604,   -37,  -205,   -38,  -624,   -41,   -42,  -195,  -262,   -44,
   -45,   -46,  -612,  -298,  -624,  -624,  -623,  -289,  -624,  -624,
  -624,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,
  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,
  -228,  -229,  -232,  -233,  -234,  -235,  -612,  -623,  -257,  -601,
  -602,   -54,   -59,  -258,  -417,  -623,  -623,  -612,  -612,  -294,
  -253,  -624,  -261,  -254,  -624,  -259,  -624,  -263,  -624,  -596,
  -594,  -597,   -12,  -611,   -16,  -612,   -70,  -287,   -86,   -75,
  -624,  -612,  -623,  -624,  -624,   -96,  -624,  -497,  -624,   -82,
   -87,  -624,  -624,  -624,  -624,  -236,  -624,  -437,  -624,  -612,
  -614,  -241,  -618,  -617,  -243,  -618,  -290,  -291,  -590,  -624,
  -546,  -406,  -585,  -585,  -529,  -531,  -531,  -531,  -545,  -547,
  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -624,  -556,  -558,
  -560,  -565,  -567,  -568,  -570,  -575,  -577,  -578,  -580,  -581,
  -582,  -624,  -623,  -347,  -348,  -623,  -624,  -624,  -624,  -624,
  -432,  -623,  -624,  -624,  -289,  -313,  -107,  -108,  -624,  -110,
  -624,  -280,  -624,  -624,  -324,  -546,  -328,  -624,  -452,  -475,
  -480,  -481,  -483,  -454,  -477,  -455,  -479,  -456,  -457,  -624,
  -460,  -462,  -624,  -463,  -466,  -467,  -624,  -468,  -469,  -624,
  -495,  -624,   -18,  -624,   -28,  -270,  -624,  -624,  -425,  -624,
  -249,  -251,  -624,  -624,   -60,  -245,  -246,  -418,  -624,  -624,
   -62,  -419,  -624,  -624,  -297,  -601,  -602,  -601,  -602,  -612,
  -195,  -624,  -392,  -393,  -612,  -395,  -410,   -53,  -413,  -623,
  -427,  -430,  -244,  -293,  -623,  -260,  -264,  -624,  -592,  -593,
  -624,   -15,   -72,  -624,   -78,   -84,  -612,  -601,  -602,  -623,
   -93,   -95,  -624,   -80,  -624,  -204,  -214,  -612,  -623,  -623,
  -283,  -286,  -616,  -404,  -623,  -623,  -612,  -624,  -527,  -528,
  -624,  -624,  -538,  -624,  -541,  -624,  -543,  -624,  -358,  -624,
  -360,  -362,  -369,  -612,  -559,  -569,  -579,  -583,  -623,  -349,
  -623,  -306,  -350,  -351,  -309,  -624,  -312,  -624,  -612,  -601,
  -602,  -605,  -288,  -624,  -107,  -108,  -109,  -624,  -624,  -623,
  -317,  -520,  -521,  -624,  -320,  -623,  -623,  -546,  -624,  -624,
  -612,  -624,  -623,  -459,  -461,  -465,  -471,  -473,   -10,  -123,
  -268,  -624,  -198,  -624,  -615,  -623,   -33,  -200,   -34,  -201,
   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -624,  -624,  -624,
  -624,  -425,  -624,  -585,  -585,  -374,  -623,  -623,  -623,  -391,
  -624,  -612,  -397,  -554,  -562,  -563,  -573,  -623,  -415,  -414,
   -55,  -623,  -623,  -255,  -265,  -595,   -76,   -91,   -88,  -296,
  -623,  -354,  -623,  -438,  -623,  -439,  -440,  -242,  -624,  -624,
  -612,  -585,  -566,  -584,  -530,  -531,  -531,  -557,  -531,  -531,
  -576,  -531,  -554,  -571,  -612,  -624,  -367,  -624,  -555,  -624,
  -352,  -624,  -624,  -623,  -623,  -311,  -624,  -425,  -624,  -107,
  -108,  -111,  -612,  -623,  -624,  -523,  -624,  -624,  -624,  -612,
  -525,  -329,  -588,  -482,  -485,  -486,  -487,  -488,  -624,  -269,
   -32,  -199,  -250,  -624,  -237,  -624,  -372,  -373,  -382,  -376,
  -384,  -624,  -387,  -624,  -389,  -394,  -624,  -624,  -624,  -561,
  -624,  -624,  -623,  -624,  -624,   -11,  -623,  -444,  -355,  -624,
  -624,  -442,  -407,  -408,  -405,  -526,  -624,  -534,  -624,  -536,
  -624,  -539,  -624,  -542,  -544,  -359,  -361,  -365,  -624,  -370,
  -303,  -624,  -304,  -624,  -624,  -624,  -623,  -314,  -425,  -624,
  -624,  -321,  -325,  -327,  -524,  -546,  -484,  -585,  -564,  -375,
  -623,  -623,  -623,  -623,  -574,  -623,  -396,  -612,  -399,  -401,
  -402,  -572,  -624,  -289,  -411,  -624,  -428,  -431,  -443,  -623,
   -98,   -99,  -624,  -624,  -106,  -441,  -531,  -531,  -531,  -531,
  -363,  -624,  -368,  -624,  -623,  -307,  -310,  -264,  -623,  -623,
  -318,  -522,  -623,  -623,  -371,  -624,  -379,  -624,  -381,  -624,
  -385,  -624,  -388,  -390,  -398,  -624,  -288,  -605,   -56,  -437,
  -623,  -624,  -624,  -105,  -624,  -532,  -535,  -537,  -540,  -624,
  -366,  -623,  -433,  -434,  -435,  -624,  -624,  -624,  -623,  -623,
  -623,  -623,  -400,  -436,  -612,  -601,  -602,  -605,  -104,  -531,
  -364,  -353,  -315,  -322,  -330,  -624,  -377,  -380,  -383,  -386,
  -425,  -533,  -623,  -378 ]

clist = [
'6,219,278,278,278,423,430,436,446,370,117,261,589,130,130,558,273,314',
'314,638,339,222,279,279,279,551,397,326,262,125,208,300,698,538,135',
'135,9,133,133,503,849,420,9,329,4,343,344,443,114,347,113,314,332,756',
'929,488,837,582,585,321,331,336,299,797,328,497,541,544,492,342,342',
'548,840,342,529,117,130,708,709,675,820,378,675,380,382,385,388,391',
'394,380,798,718,296,130,298,265,271,274,403,404,405,406,280,280,280',
'731,734,276,290,291,317,377,852,678,723,348,800,958,666,746,960,926',
'342,342,342,342,670,671,341,712,714,716,333,337,118,982,614,836,616',
'838,954,620,619,379,620,622,603,866,9,395,992,602,614,604,678,360,755',
'407,830,605,759,945,358,989,743,854,799,346,853,345,539,801,327,29,371',
'750,355,957,340,29,335,549,278,703,863,374,503,668,1020,487,807,495',
'811,496,29,812,1022,737,824,431,419,909,453,29,29,29,419,29,415,421',
'424,376,334,441,445,633,440,381,675,675,449,450,451,452,558,1032,1040',
'384,960,902,669,387,29,837,706,414,278,29,29,390,401,29,278,718,954',
'278,846,430,436,659,678,393,735,896,494,791,279,499,299,926,873,761',
'762,396,864,279,844,837,861,409,424,416,835,357,207,840,684,502,502',
'558,516,314,817,378,693,29,905,950,832,526,29,29,29,29,29,948,124,117',
'314,2,810,273,607,1,,,,,,,,,530,508,951,686,689,952,886,887,,,,299,586',
'587,689,,299,514,,527,,1041,857,513,280,512,314,,314,493,976,,,280,837',
',342,342,498,,117,296,,515,915,,296,,521,,,,,,,,,718,1023,718,606,519',
',,764,937,,764,29,29,29,29,738,689,29,29,29,29,29,29,588,993,,,,,,,',
',639,29,804,,6,,,917,919,130,921,923,,924,646,,,,,1028,651,,502,502',
'278,632,645,,,558,135,813,654,133,827,29,,816,431,869,9,29,446,,29,780',
',,631,980,718,785,424,,,440,938,,675,867,868,,,661,29,,29,,,,994,29',
'646,,,,,672,673,,,,,662,645,,,,,678,278,662,662,,644,682,29,,314,,650',
'685,1033,718,,718,314,431,,,,,530,,29,29,,431,424,701,530,,,,440,,,',
'825,,,,813,,440,,,697,,689,862,718,,,,681,,,1015,1016,1017,1018,667',
',,,,,,278,794,,,,,,566,939,936,674,,,,,,,431,29,,,,,,,,,,424,,732,732',
',,440,,,,,,,,,,831,754,751,728,,760,730,702,1051,,,,,,558,,,,969,809',
'804,,29,804,,1050,804,,804,,130,,,639,,776,778,,802,,984,781,783,,,445',
'769,1024,808,,,135,,,133,,,,314,,639,,662,,,,,502,,314,646,,530,651',
'819,,,,,29,802,,645,818,419,,,,29,871,,821,826,1026,1027,,,,,,848,,29',
',,775,,,,,,,639,,278,,,858,,,,821,856,821,,828,829,,,431,804,,804,,804',
',804,872,,,,342,424,,440,,,,29,,,29,,865,,,130,29,870,,,,,,,,880,,502',
'29,,,566,29,,802,,,947,314,804,794,,878,794,,794,,,889,889,889,,,,,',
',1034,689,,,,,,,,914,29,29,,,,907,29,29,,911,29,,,925,,,,931,,566,901',
',,,903,904,,,639,,940,,,,,908,,,944,,17,342,795,,,,17,,,,732,,,,342',
',,,941,,,223,29,29,,314,933,934,,,223,223,223,,17,305,305,314,803,,794',
',794,,794,833,794,,833,,,,,,,,,,,223,,29,,,223,223,,29,223,352,,,,29',
'29,965,,,,968,29,,,1004,,566,,566,,,794,29,991,,,889,889,889,889,,889',
',,,,,,796,,988,,440,17,,,,,223,223,223,223,17,,,,29,,278,,29,29,566',
',821,,,,,,,29,,1009,,431,,,,,,,,,,,424,839,1021,841,,639,440,1025,,',
',821,,,29,,29,29,889,889,889,889,,,,,29,29,,,,,,,,,890,892,894,,,,889',
',,41,,,,,,41,17,223,223,223,,,223,223,223,223,223,223,,29,,,833,29,',
'795,,,795,17,795,,,41,303,303,,,,,,,,,,,,,,,,,,29,,,,,,,,803,,223,803',
',,,350,223,,372,223,,,,,,,,,,,,,,29,,,566,,,17,,17,,,,305,17,,29,,,',
',29,,,29,29,41,,,,305,,,566,,41,,,,17,,,29,,,,,795,953,795,955,795,',
'795,,,,223,223,996,998,1000,1002,,1003,,,,,,600,,600,977,,978,,979,42',
',,,,803,42,,,,,,,,,,,,,795,,,,,,,,,,,,,,,42,304,304,,,,,,17,41,,,,,',
',,,,,,,,,,1046,1047,1048,1049,,,,41,,,351,,,373,,1029,,1030,,1031,,',
',,1053,,,,,,,223,,,1039,,,,,,,,,,,,,,,,,,,42,,,,,,,,,42,,,1052,,,,,41',
',41,,,,303,41,,,,,,,,,,,17,,,,,303,,305,,223,,,,,41,305,,,,,,16,,223',
',,,16,,,,,,,,,,,,,,,,,,372,,372,,,,,,,,16,,,,,42,,,,,,,,,17,,,17,,,',
',,223,,,,,42,,,,,,,223,,,,223,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,223',
'223,,,16,,223,223,,,223,,,16,,,,42,,42,,,,304,42,,,,,,,,,,,,,,,,304',
'305,,,,,,,,42,,,305,,,,,,,,,,17,17,,,,,,,,41,,,,,,,303,,373,,373,,,',
'303,,,,,,18,,,,,,18,16,,223,,,19,,,223,,,19,,,17,17,,,,,,17,,16,,,,18',
'307,307,,42,223,,,,,,,19,,41,,,41,,,,,,,,,,,,,,,,,,354,899,,,17,,,,17',
'17,,,356,,,,,,,17,,,,,16,,16,,,,,16,,,,,,,,,,,,18,,,,,223,,17,17,18',
',,19,16,,,,17,223,,,19,,,,,,,,,,42,,,,,,303,304,,,,,,,,304,,303,,,,961',
',,,17,,41,41,17,,,,972,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,16,18,,,,,42,',
',42,,,,19,,41,41,,,,444,,41,,18,,,,,17,,,,,,,19,,,,,,,,17,,,,,17,,,17',
'17,,,,,,,,,,,372,,,41,,,223,41,41,,,,,,,,,,41,,,,,18,,18,,,,307,18,',
',,,19,,19,,,,16,19,304,,,307,,,41,41,,,,304,18,,,,41,,,,,42,42,,19,',
',,,,,,,,,,,,,,,,,601,,601,,,,,,372,,,,41,,,,41,,,,970,,,,16,,,16,,42',
'42,,,,,,42,,,,,,,,,,41,,,,18,,,,,,,,,,,,19,,,,,,,,,,,,,,,,373,41,,42',
',,,42,42,,,,,,,,41,,42,,,41,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,42,42,,,',
',,,,,42,,,,,,,,,16,16,,,,,,,,18,,,,,338,,307,,,,,19,,,307,,373,,,,42',
',,,42,,,,971,,,,,,,,,,,,,16,16,,,,,,16,,,,,,42,,,,,,,,,,,,,,18,,,18',
',,,,,,,,19,,,19,,,,42,,,,,,16,,,,16,16,,,,42,,,,,42,16,,42,42,,,,,,',
',,,,,,,,,,,,,,,,,,,,,16,16,,,,,,,,,16,444,417,,,,,,448,,,,,,,,,,,,307',
',,,,,,,,,,307,,,,,,,,16,,18,18,16,,,,,,,,,,19,19,,,,,,,,,,,,,,,,,,,16',
'505,,507,,509,,510,511,,,,,,,,,,,18,18,,,,,877,18,,,,,19,19,16,,,,,19',
',,,,,,,,,16,,,,,16,,,16,16,,,,,,,,,,,601,,,18,,,,18,18,,,,,,,19,230',
',18,19,19,,,,,277,277,277,,,19,,,,,,,,323,324,325,,,,,,,,,18,18,,,,',
'277,277,,,18,,19,19,,,,,,,635,,19,,,,,,,,,,,,,,,,,,,,,,,601,,,,18,,',
',18,,,,974,,,,19,,,,19,,,,975,,,,,,,,,,,,,,18,,,,,,,,,,,,19,,,,,,,,676',
',,338,,679,,,,,,,,18,,,,,,,,,,,,19,,,18,,,,,18,,,18,18,,,19,676,,,338',
'19,,,19,19,,277,422,277,,,442,447,,,,,,,,,,,,724,,,230,,,461,462,463',
'464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480',
'481,482,483,484,485,486,,,,,,,277,,,,,,277,,,277,,,,,,,277,,277,,277',
',277,277,,,,,770,,,,676,338,,,,,,,,,,,,,,,,,,,,,,,,,,,535,,,,,,,,,814',
',,815,,,,,,,,,,,,,,,,,,,823,,,,,,,,,,,,,,,,,,843,,,,,,,,,,,,,,,,,,,',
'448,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,879,,,,,,,,,,,,,,,,,,,,,,,,',
',,277,,442,660,422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,,,277',
',277,,,,,,,,,,,,,,,,277,,,,,,,,,695,696,,,,,,,,338,,277,,,277,,,,,,',
',,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,,277,,987,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,277,772,,,277,277,777,779,,,,,782,784,,,660',
'786,,,,,,,,,,,,,,,,,,,,,,,,277,,,277,,,,,,,,,,,,,,,,,,,277,,,,,,,,,',
',,,,,,,,277,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,',
',,,277,,881,,,,,,,,,,,,,,777,779,784,782,,884,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277',
'881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277' ]
        racc_goto_table = arr = ::Array.new(3391, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,35,35,35,25,39,39,20,59,97,152,94,60,60,182,73,67,67,26,88,22,70',
'70,70,151,59,33,38,17,17,52,13,10,64,64,9,63,63,75,92,29,9,50,2,19,19',
'29,8,19,5,67,70,98,132,39,187,91,91,66,6,6,12,141,31,25,71,71,41,31',
'31,71,192,31,54,97,60,136,136,76,14,6,76,6,6,6,6,6,6,6,142,130,48,60',
'49,40,40,40,19,19,19,19,72,72,72,93,93,47,47,47,53,168,14,197,131,5',
'144,146,42,57,147,129,31,31,31,31,42,42,150,184,184,184,72,72,7,132',
'173,142,173,142,193,173,172,169,173,172,110,111,9,169,112,58,173,58',
'197,113,114,9,144,115,116,117,108,107,106,105,133,104,103,102,101,139',
'100,43,99,96,95,145,90,43,87,148,35,149,109,86,75,74,132,153,154,157',
'158,159,43,160,161,162,163,73,70,164,50,43,43,43,70,43,22,22,6,167,69',
'22,22,65,60,170,76,76,31,31,31,31,182,146,132,171,147,45,44,174,43,187',
'151,12,35,43,43,175,7,43,35,130,193,35,130,39,39,25,197,176,94,144,73',
'26,70,50,12,129,177,178,179,180,181,70,131,187,57,32,6,30,185,21,18',
'192,54,6,6,182,50,67,26,6,54,43,15,141,189,33,43,43,43,43,43,190,11',
'97,67,3,42,73,196,1,,,,,,,,,52,168,142,25,39,142,136,136,,,,12,19,19',
'39,,12,9,,66,,92,26,8,72,5,67,,67,47,142,,,72,187,,31,31,47,,97,48,',
'49,136,,48,,49,,,,,,,,,130,14,130,38,53,,,173,93,,173,43,43,43,43,25',
'39,43,43,43,43,43,43,5,98,,,,,,,,,33,43,188,,6,,,184,184,60,184,184',
',184,73,,,,,142,73,,6,6,35,17,6,,,182,64,75,50,63,71,43,,54,73,151,9',
'43,20,,43,41,,,2,130,130,41,6,,,60,26,,76,10,10,,,33,43,,43,,,,136,43',
'73,,,,,50,50,,,,,6,6,,,,,197,35,6,6,,40,50,43,,67,,40,50,13,130,,130',
'67,73,,,,,52,,43,43,,73,6,50,52,,,,60,,,,29,,,,75,,60,,,31,,39,25,130',
',,,9,,,184,184,184,184,40,,,,,,,35,135,,,,,,186,10,91,72,,,,,,,73,43',
',,,,,,,,,6,,97,97,,,60,,,,,,,,,,135,31,97,12,,31,12,72,184,,,,,,182',
',,,91,88,188,,43,188,,26,188,,188,,60,,,33,,22,22,,33,,91,22,22,,,22',
'17,94,152,,,64,,,63,,,,67,,33,,6,,,,,6,,67,73,,52,73,50,,,,,43,33,,6',
'52,70,,,,43,59,,6,6,10,10,,,,,,50,,43,,,72,,,,,,,33,,35,,,19,,,,6,70',
'6,,12,12,,,73,188,,188,,188,,188,50,,,,31,6,,60,,,,43,,,43,,97,,,60',
'43,97,,,,,,,,22,,6,43,,,186,43,,33,,,135,67,188,135,,12,135,,135,,,6',
'6,6,,,,,,,25,39,,,,,,,,50,43,43,,,,6,43,43,,6,43,,,50,,,,19,,186,12',
',,,12,12,,,33,,19,,,,,12,,,50,,24,31,137,,,,24,,,,97,,,,31,,,,97,,,24',
'43,43,,67,12,12,,,24,24,24,,24,24,24,67,186,,135,,135,,135,137,135,',
'137,,,,,,,,,,,24,,43,,,24,24,,43,24,24,,,,43,43,12,,,,12,43,,,33,,186',
',186,,,135,43,97,,,6,6,6,6,,6,,,,,,,140,,12,,60,24,,,,,24,24,24,24,24',
',,,43,,35,,43,43,186,,6,,,,,,,43,,12,,73,,,,,,,,,,,6,140,12,140,,33',
'60,12,,,,6,,,43,,43,43,6,6,6,6,,,,,43,43,,,,,,,,,138,138,138,,,,6,,',
'55,,,,,,55,24,24,24,24,,,24,24,24,24,24,24,,43,,,137,43,,137,,,137,24',
'137,,,55,55,55,,,,,,,,,,,,,,,,,,43,,,,,,,,186,,24,186,,,,55,24,,55,24',
',,,,,,,,,,,,,43,,,186,,,24,,24,,,,24,24,,43,,,,,43,,,43,43,55,,,,24',
',,186,,55,,,,24,,,43,,,,,137,140,137,140,137,,137,,,,24,24,138,138,138',
'138,,138,,,,,,24,,24,140,,140,,140,56,,,,,186,56,,,,,,,,,,,,,137,,,',
',,,,,,,,,,,56,56,56,,,,,,24,55,,,,,,,,,,,,,,,,138,138,138,138,,,,55',
',,56,,,56,,140,,140,,140,,,,,138,,,,,,,24,,,140,,,,,,,,,,,,,,,,,,,56',
',,,,,,,,56,,,140,,,,,55,,55,,,,55,55,,,,,,,,,,,24,,,,,55,,24,,24,,,',
',55,24,,,,,,23,,24,,,,23,,,,,,,,,,,,,,,,,,55,,55,,,,,,,,23,,,,,56,,',
',,,,,,24,,,24,,,,,,24,,,,,56,,,,,,,24,,,,24,55,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,24,24,,,23,,24,24,,,24,,,23,,,,56,,56,,,,56,56,,,,,,,,,',
',,,,,,56,24,,,,,,,,56,,,24,,,,,,,,,,24,24,,,,,,,,55,,,,,,,55,,56,,56',
',,,55,,,,,,27,,,,,,27,23,,24,,,28,,,24,,,28,,,24,24,,,,,,24,,23,,,,27',
'27,27,,56,24,,,,,,,28,,55,,,55,,,,,,,,,,,,,,,,,,27,24,,,24,,,,24,24',
',,28,,,,,,,24,,,,,23,,23,,,,,23,,,,,,,,,,,,27,,,,,24,,24,24,27,,,28',
'23,,,,24,24,,,28,,,,,,,,,,56,,,,,,55,56,,,,,,,,56,,55,,,,24,,,,24,,55',
'55,24,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,23,27,,,,,56,,,56,,,,28,',
'55,55,,,,28,,55,,27,,,,,24,,,,,,,28,,,,,,,,24,,,,,24,,,24,24,,,,,,,',
',,,55,,,55,,,24,55,55,,,,,,,,,,55,,,,,27,,27,,,,27,27,,,,,28,,28,,,',
'23,28,56,,,27,,,55,55,,,,56,27,,,,55,,,,,56,56,,28,,,,,,,,,,,,,,,,,',
',27,,27,,,,,,55,,,,55,,,,55,,,,55,,,,23,,,23,,56,56,,,,,,56,,,,,,,,',
',55,,,,27,,,,,,,,,,,,28,,,,,,,,,,,,,,,,56,55,,56,,,,56,56,,,,,,,,55',
',56,,,55,,,55,55,,,,,,,,,,,,,,,,,,,,,,,,56,56,,,,,,,,,56,,,,,,,,,23',
'23,,,,,,,,27,,,,,68,,27,,,,,28,,,27,,56,,,,56,,,,56,,,,56,,,,,,,,,,',
',,23,23,,,,,,23,,,,,,56,,,,,,,,,,,,,,27,,,27,,,,,,,,,28,,,28,,,,56,',
',,,,23,,,,23,23,,,,56,,,,,56,23,,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,23',
'23,,,,,,,,,23,28,68,,,,,,68,,,,,,,,,,,,27,,,,,,,,,,,27,,,,,,,,23,,27',
'27,23,,,,,,,,,,28,28,,,,,,,,,,,,,,,,,,,23,68,,68,,68,,68,68,,,,,,,,',
',,27,27,,,,,27,27,,,,,28,28,23,,,,,28,,,,,,,,,,23,,,,,23,,,23,23,,,',
',,,,,,,27,,,27,,,,27,27,,,,,,,28,34,,27,28,28,,,,,34,34,34,,,28,,,,',
',,,34,34,34,,,,,,,,,27,27,,,,,34,34,,,27,,28,28,,,,,,,68,,28,,,,,,,',
',,,,,,,,,,,,,,,27,,,,27,,,,27,,,,27,,,,28,,,,28,,,,28,,,,,,,,,,,,,,27',
',,,,,,,,,,,28,,,,,,,,68,,,68,,68,,,,,,,,27,,,,,,,,,,,,28,,,27,,,,,27',
',,27,27,,,28,68,,,68,28,,,28,28,,34,34,34,,,34,34,,,,,,,,,,,,68,,,34',
',,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,,,,,,,34,,,,,,34,,,34,,,,,,,34,,34,,34,,34,34,,,,,68,,,',
'68,68,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,68,,,68,,,,,,,,,,,,,,,,,',
',68,,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,',
'34,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,,,,,,,,,,,,,34,,,,,,,,,34',
'34,,,,,,,,68,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,',
',34,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34',
',,,,34,34,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,34',
',,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,',
',,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34',
'34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3391, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   303,    42,   299,   nil,    45,    -2,   126,    43,    34,
  -294,   286,    26,  -505,  -618,  -534,   nil,    18,   262,   -21,
  -208,   202,    -2,  1383,   851,  -207,  -404,  1583,  1595,  -169,
    61,     3,   144,   -21,  2380,   -30,   nil,   nil,     1,  -207,
    66,  -197,  -369,   171,  -261,  -581,   nil,    75,    56,    58,
   -18,   nil,    -6,    72,  -244,  1051,  1215,  -479,  -207,   -65,
     2,   nil,   nil,    26,    23,  -198,    15,   -20,  2038,   150,
   -10,  -266,    70,   -14,  -301,  -241,  -422,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   111,   117,   -44,   nil,
   113,  -286,  -688,  -481,  -336,   105,  -427,     5,  -552,   100,
   112,  -158,   101,  -563,    98,  -569,  -431,  -774,    90,  -566,
  -213,  -607,  -791,    82,  -448,  -211,  -446,  -710,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -724,
  -476,  -453,  -793,  -498,   nil,  -102,  -475,   191,   248,  -493,
   296,  -601,  -574,   nil,  -548,  -720,  -780,  -777,  -160,  -366,
    63,  -316,   -14,   -71,  -476,   nil,   nil,   -78,  -478,   -77,
  -476,  -792,  -393,  -501,  -623,   nil,   nil,   131,    28,    58,
   131,   140,  -242,  -243,   143,   150,   161,  -501,  -350,  -350,
   172,  -488,  -326,   nil,  -426,  -439,   227,  -655,  -260,  -419,
  -590,   nil,  -641,  -751,   nil,   nil,   -73,  -391 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   293,     7,   349,   294,
   nil,   nil,   537,   nil,   850,   nil,   292,   nil,   nil,   nil,
    14,    15,    21,   229,   322,   nil,   nil,   227,   228,   nil,
   nil,    20,   nil,   330,    24,    25,    26,    27,   nil,   692,
   nil,   nil,   nil,   311,   nil,   nil,    28,   425,    35,   nil,
   nil,    37,    40,    39,   nil,   224,   225,   599,   nil,   132,
   433,   131,   134,    78,    79,   nil,    93,    49,   283,   nil,
   426,   nil,   427,   438,   647,   500,   281,   266,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   267,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   583,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   720,
   565,   nil,   721,   949,   793,   553,   nil,   554,   nil,   nil,
   555,   nil,   557,   663,   nil,   nil,   nil,   563,   nil,   nil,
   nil,   758,   nil,   nil,   nil,   437,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   609,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   834,   552,   nil,   556,   842,   568,   570,   571,
   805,   574,   575,   806,   578,   581,   nil,   287 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 177, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 210, :_reduce_122,
  4, 163, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  3, 212, :_reduce_291,
  1, 212, :_reduce_292,
  4, 212, :_reduce_293,
  3, 212, :_reduce_294,
  1, 212, :_reduce_295,
  5, 212, :_reduce_296,
  4, 212, :_reduce_297,
  3, 212, :_reduce_298,
  2, 212, :_reduce_299,
  1, 212, :_reduce_none,
  2, 212, :_reduce_301,
  2, 212, :_reduce_302,
  6, 212, :_reduce_303,
  6, 212, :_reduce_304,
  0, 247, :_reduce_305,
  0, 248, :_reduce_306,
  7, 212, :_reduce_307,
  0, 249, :_reduce_308,
  0, 250, :_reduce_309,
  7, 212, :_reduce_310,
  5, 212, :_reduce_311,
  4, 212, :_reduce_312,
  0, 251, :_reduce_313,
  0, 252, :_reduce_314,
  9, 212, :_reduce_315,
  0, 253, :_reduce_316,
  0, 254, :_reduce_317,
  7, 212, :_reduce_318,
  0, 255, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  9, 212, :_reduce_322,
  0, 258, :_reduce_323,
  0, 259, :_reduce_324,
  6, 212, :_reduce_325,
  0, 260, :_reduce_326,
  6, 212, :_reduce_327,
  0, 261, :_reduce_328,
  0, 262, :_reduce_329,
  9, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 169, :_reduce_335,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_353,
  1, 159, :_reduce_none,
  2, 159, :_reduce_355,
  1, 240, :_reduce_none,
  1, 240, :_reduce_357,
  1, 274, :_reduce_none,
  3, 274, :_reduce_359,
  1, 277, :_reduce_360,
  3, 277, :_reduce_361,
  1, 276, :_reduce_362,
  4, 276, :_reduce_363,
  6, 276, :_reduce_364,
  3, 276, :_reduce_365,
  5, 276, :_reduce_366,
  2, 276, :_reduce_367,
  4, 276, :_reduce_368,
  1, 276, :_reduce_369,
  3, 276, :_reduce_370,
  4, 278, :_reduce_371,
  2, 278, :_reduce_372,
  2, 278, :_reduce_373,
  1, 278, :_reduce_374,
  2, 283, :_reduce_375,
  1, 283, :_reduce_none,
  6, 284, :_reduce_377,
  8, 284, :_reduce_378,
  4, 284, :_reduce_379,
  6, 284, :_reduce_380,
  4, 284, :_reduce_381,
  2, 284, :_reduce_382,
  6, 284, :_reduce_383,
  2, 284, :_reduce_384,
  4, 284, :_reduce_385,
  6, 284, :_reduce_386,
  2, 284, :_reduce_387,
  4, 284, :_reduce_388,
  2, 284, :_reduce_389,
  4, 284, :_reduce_390,
  1, 284, :_reduce_391,
  1, 187, :_reduce_392,
  1, 187, :_reduce_none,
  3, 288, :_reduce_394,
  1, 288, :_reduce_395,
  4, 288, :_reduce_396,
  1, 289, :_reduce_none,
  4, 289, :_reduce_398,
  1, 290, :_reduce_399,
  3, 290, :_reduce_400,
  1, 291, :_reduce_401,
  1, 291, :_reduce_none,
  0, 295, :_reduce_403,
  3, 235, :_reduce_404,
  4, 293, :_reduce_405,
  1, 293, :_reduce_406,
  3, 294, :_reduce_407,
  3, 294, :_reduce_408,
  0, 298, :_reduce_409,
  0, 299, :_reduce_410,
  6, 297, :_reduce_411,
  2, 182, :_reduce_412,
  4, 182, :_reduce_413,
  5, 182, :_reduce_414,
  5, 182, :_reduce_415,
  0, 301, :_reduce_416,
  3, 234, :_reduce_417,
  4, 234, :_reduce_418,
  4, 234, :_reduce_419,
  3, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  2, 234, :_reduce_423,
  1, 234, :_reduce_424,
  4, 234, :_reduce_425,
  0, 302, :_reduce_426,
  0, 303, :_reduce_427,
  6, 233, :_reduce_428,
  0, 304, :_reduce_429,
  0, 305, :_reduce_430,
  6, 233, :_reduce_431,
  0, 307, :_reduce_432,
  6, 239, :_reduce_433,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  6, 158, :_reduce_436,
  0, 158, :_reduce_437,
  1, 308, :_reduce_438,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 309, :_reduce_441,
  1, 309, :_reduce_none,
  2, 160, :_reduce_443,
  1, 160, :_reduce_none,
  1, 223, :_reduce_445,
  1, 223, :_reduce_446,
  1, 223, :_reduce_none,
  1, 224, :_reduce_448,
  1, 311, :_reduce_449,
  1, 311, :_reduce_none,
  2, 311, :_reduce_451,
  3, 312, :_reduce_452,
  1, 312, :_reduce_453,
  3, 225, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 227, :_reduce_457,
  1, 316, :_reduce_458,
  3, 316, :_reduce_459,
  1, 317, :_reduce_none,
  2, 317, :_reduce_461,
  3, 229, :_reduce_462,
  3, 229, :_reduce_463,
  1, 319, :_reduce_464,
  3, 319, :_reduce_465,
  3, 228, :_reduce_466,
  3, 228, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  1, 320, :_reduce_470,
  3, 320, :_reduce_471,
  1, 321, :_reduce_472,
  3, 321, :_reduce_473,
  1, 313, :_reduce_474,
  2, 313, :_reduce_475,
  1, 314, :_reduce_476,
  2, 314, :_reduce_477,
  1, 315, :_reduce_478,
  2, 315, :_reduce_479,
  1, 318, :_reduce_480,
  0, 323, :_reduce_481,
  3, 318, :_reduce_482,
  0, 324, :_reduce_483,
  4, 318, :_reduce_484,
  1, 322, :_reduce_485,
  1, 322, :_reduce_486,
  1, 322, :_reduce_487,
  1, 322, :_reduce_none,
  2, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  3, 209, :_reduce_495,
  1, 310, :_reduce_none,
  2, 310, :_reduce_497,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_507,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 231, :_reduce_514,
  1, 231, :_reduce_515,
  1, 168, :_reduce_516,
  1, 168, :_reduce_517,
  1, 172, :_reduce_518,
  1, 172, :_reduce_519,
  1, 241, :_reduce_520,
  0, 326, :_reduce_521,
  4, 241, :_reduce_522,
  2, 241, :_reduce_523,
  3, 243, :_reduce_524,
  2, 243, :_reduce_525,
  4, 327, :_reduce_526,
  2, 327, :_reduce_527,
  2, 327, :_reduce_528,
  1, 327, :_reduce_none,
  2, 329, :_reduce_530,
  0, 329, :_reduce_531,
  6, 296, :_reduce_532,
  8, 296, :_reduce_533,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  6, 296, :_reduce_540,
  2, 296, :_reduce_541,
  4, 296, :_reduce_542,
  2, 296, :_reduce_543,
  4, 296, :_reduce_544,
  1, 296, :_reduce_545,
  0, 296, :_reduce_546,
  1, 292, :_reduce_547,
  1, 292, :_reduce_548,
  1, 292, :_reduce_549,
  1, 292, :_reduce_550,
  1, 275, :_reduce_none,
  1, 275, :_reduce_552,
  1, 331, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_555,
  1, 285, :_reduce_556,
  3, 285, :_reduce_557,
  1, 333, :_reduce_none,
  2, 334, :_reduce_559,
  1, 334, :_reduce_560,
  2, 335, :_reduce_561,
  1, 335, :_reduce_562,
  1, 279, :_reduce_none,
  3, 279, :_reduce_564,
  1, 328, :_reduce_none,
  3, 328, :_reduce_566,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 280, :_reduce_569,
  1, 280, :_reduce_570,
  3, 337, :_reduce_571,
  3, 338, :_reduce_572,
  1, 286, :_reduce_573,
  3, 286, :_reduce_574,
  1, 330, :_reduce_575,
  3, 330, :_reduce_576,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 287, :_reduce_579,
  1, 287, :_reduce_580,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 282, :_reduce_583,
  2, 281, :_reduce_584,
  0, 281, :_reduce_585,
  1, 244, :_reduce_none,
  0, 341, :_reduce_587,
  4, 244, :_reduce_588,
  1, 232, :_reduce_589,
  2, 232, :_reduce_590,
  1, 217, :_reduce_none,
  3, 217, :_reduce_592,
  3, 342, :_reduce_593,
  2, 342, :_reduce_594,
  4, 342, :_reduce_595,
  2, 342, :_reduce_596,
  2, 342, :_reduce_597,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 171, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_619,
  1, 242, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_622,
  0, 151, :_reduce_623 ]

racc_reduce_n = 624

racc_shift_n = 1054

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_484(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_596(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

def _reduce_619(val, _values, result)
 yyerrok 
    result
end

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

def _reduce_623(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
